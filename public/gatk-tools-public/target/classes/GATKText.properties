#Strings displayed by the GATK help system
#Tue May 24 13:46:13 EDT 2016
org.broadinstitute.gatk.tools.walkers.variantutils.GenotypeConcordance.help.description=Genotype concordance between two callsets  <p> This tool takes in two callsets (vcfs) and tabulates the number of sites which overlap and share alleles, and for each sample, the genotype-by-genotype counts (e.g. the number of sites at which a sample was called homozygous-reference in the EVAL callset, but homozygous-variant in the COMP callset). It outputs these counts as well as convenient proportions (such as the proportion of het calls in the EVAL which were called REF in the COMP) and metrics (such as NRD and NRS). </p>  <h3>Input</h3> <p> Genotype concordance requires two callsets (as it does a comparison)\: an EVAL and a COMP callset, specified via the -eval and -comp arguments. Typically, the EVAL callset is an experimental set you want to evaluate, while the COMP callset is a previously existing set used as a standard for comparison (taken to represent "truth"). </p> <p> (Optional) Jexl expressions for genotype-level filtering of EVAL or COMP genotypes, specified via the -gfe and -cfe arguments, respectively. </p>  <h3>Output</h3> <p> Genotype Concordance writes a GATK report to the specified file (via -o), consisting of multiple tables of counts and proportions. These tables are constructed on a per-sample basis, and include counts of EVAL vs COMP genotype states. </p> <h4>Tables</h4> <p> Headers for the (non-moltenized -- see below) GenotypeConcordance counts and proportions tables give the genotype of the EVAL callset followed by the genotype of the COMP callset. For example the value corresponding to HOM_REF_HET reflects variants called HOM_REF in the EVAL callset and HET in the COMP callset. Variants for which the alternate alleles between the EVAL and COMP sample did not match are excluded from genotype comparisons and given in the "Mismatching_Alleles" field. </p> <p> It may be informative to reshape rows of the GenotypeConcordance counts and proportions tables into separate row-major tables where the columns indicate the COMP genotype and the rows indicate the EVAL genotype for easy comparison between the two callsets. This can be done with the gsa.reshape.concordance.table function in the gsalib R library. In Excel this can be accomplished using the OFFSET function. </p> <ul> <li><i>GenotypeConcordance_CompProportions</i>\: Gives the proportion of variants in each category normalized to the total number of called genotypes in the COMP callset</li> <li><i>GenotypeConcordance_Counts</i>\: Gives the counts for number of genotypes in each category</li> <li><i>GenotypeConcordance_EvalProportions</i>\: Gives the proportion of genotypes in each category normalized to the total number of called genotypes in the EVAL callset</li> <li><i>GenotypeConcordance_Summary</i>\: Summary statistics for the sum of all samples and each sample individually. See below for definitions.</li> <li><i>SiteConcordance_Summary</i>\: Gives comparison counts of called genotypes and their alleles between the two callsets. See below for definitions.</li> </ul> </p>  <h4>Term and metrics definitions</h4> <p> <ul> <li><i>GenotypeConcordance_CompProportions</i>, <i>GenotypeConcordance_Counts</i>, and <i>GenotypeConcordance_EvalProportions</i></li> <ul> <li>NO_CALL\: reported genotype is ./., indicating not enough data to call</li> <li>HET\: heterozygous</li> <li>HOM_REF\: homozygous reference</li> <li>HOM_VAR\: homozygous variant</li> <li>UNAVAILABLE\: variant is not called in this callset</li> <li>MIXED\: something like ./1</li> </ul> <li><i>GenotypeConcordance_Summary</i></li> <ul> <li>Non-Reference_Sensitivity (NRS)\: sensitivity of the EVAL calls to polymorphic calls in the COMP set, calculated by (\# true positive)/(\# true polymorphic)</li> <li>Non-Reference_Discrepancy (NRD)\: genotype discordance excluding concordant reference sites, calculated by (\# discordant sites)/(total excluding \# HOM_REF_HOM_REF) \= 1.0-(\# HOM_VAR_HOM_VAR + \# HET_HET)/(total excluding \# HOM_REF_HOM_REF)</li> <li>Overall_Genotype_Concordance\: overall concordance calculated by (\# concordant genotypes)/(\# genotypes)</li> </ul> <li><i>SiteConcordance_Summary</i></li> <ul> <li>ALLELES_MATCH\: counts of calls at the same site where the alleles match</li> <li>ALLELES_DO_NOT_MATCH\: counts of calls at the same location with different alleles, such as the EVAL set calling a 'G' alternate allele, and the comp set calling a 'T' alternate allele</li> <li>EVAL_SUBSET_TRUTH\: (multi-alleleic sites only) ALT alleles for EVAL are a subset of ALT alleles for COMP. See also below.</li> <li>EVAL_SUPERSET_TRUTH\: (multi-allelic sites only) ALT alleles for COMP are a subset of ALT alleles for EVAL. See also below.</li> <li>EVAL_ONLY\: counts of sites present only in the EVAL set, not in the COMP set</li> <li>TRUTH_ONLY\: counts of sites present only in the COMP set, not in the EVAL set</li> </ul> </ul> </p>  <h4>Site-level allelic concordance</h4>  <p> For strictly bi-allelic VCFs, only the ALLELES_MATCH, EVAL_ONLY, TRUTH_ONLY fields will be populated, but where multi-allelic sites are involved counts for EVAL_SUBSET_TRUTH and EVAL_SUPERSET_TRUTH will be generated. </p> <p> For example, in the following situation <pre> eval\:  ref - A   alt - C comp\:  ref - A   alt - C,T </pre> then the site is tabulated as EVAL_SUBSET_TRUTH. Were the situation reversed, it would be EVAL_SUPERSET_TRUTH. However, in the case where EVAL has both C and T alternate alleles, both must be observed in the genotypes (that is, there must be at least one of (0/1,1/1) and at least one of (0/2,1/2,2/2) in the genotype field). If one of the alleles has no observations in the genotype fields of the EVAL, the site-level concordance is tabulated as though that allele were not present in the record. </p>  <h4>Monomorphic Records</h4> <p> A site which has an alternate allele, but which is monomorphic in samples, is treated as not having been discovered, and will be recorded in the TRUTH_ONLY column (if a record exists in the COMP set), or not at all (if no record exists in the COMP set). </p> <p> That is, in the situation <pre> eval\:  ref - A   alt - C   genotypes - 0/0  0/0  0/0 ... 0/0 comp\:  ref - A   alt - C   ...         0/0  0/0  ... </pre> is equivalent to <pre> eval\:  ref - A   alt - .   genotypes - 0/0  0/0  0/0 ... 0/0 comp\:  ref - A   alt - C   ...         0/0  0/0  ... </pre> </p> <p> When a record is present in the COMP set the *genotypes* for the monomorphic site will still be used to evaluate per-sample genotype concordance counts. </p>  <h4>Filtered Records</h4> Filtered records are treated as though they were not present in the VCF, unless -ignoreSiteFilters is provided, in which case all records are used. There is currently no way to assess concordance metrics on filtered sites exclusively. SelectVariants can be used to extract filtered sites, and VariantFiltration used to un-filter them.  <h4>Moltenized tables</h4>  <p>These tables may be optionally moltenized via the -moltenize argument. That is, the standard table  <pre> Sample   NO_CALL_HOM_REF  NO_CALL_HET  NO_CALL_HOM_VAR   (...) NA12878       0.003        0.001            0.000        (...) NA12891       0.005        0.000            0.000        (...) </pre>  would instead be displayed  <pre> NA12878  NO_CALL_HOM_REF   0.003 NA12878  NO_CALL_HET       0.001 NA12878  NO_CALL_HOM_VAR   0.000 NA12891  NO_CALL_HOM_REF   0.005 NA12891  NO_CALL_HET       0.000 NA12891  NO_CALL_HOM_VAR   0.000 (...) </pre>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T GenotypeConcordance \\ -R reference.fasta \\ -eval test_set.vcf \\ -comp truth_set.vcf \\ -o output.grp </pre>
org.broadinstitute.gatk.tools.walkers.varianteval.util.Analysis.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.CountIntervals.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.fasta.FastaReferenceMaker.help.summary=Create a subset of a FASTA reference sequence
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.PrintMissingComp.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.VariantSummary.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.SnpEffUtil.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.diagnostics.ReadLengthDistribution.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantutils.VariantsToBinaryPed.help.description=Convert VCF to binary pedigree file  <p>This tool takes a VCF and produces a binary pedigree as used by <a href\="http\://pngu.mgh.harvard.edu/~purcell/plink/">PLINK</a>, consisting of three associated files (.bed/.bim/.fam).</p>  <h3>Inputs</h3> <p> A VCF file and a metadata file. </p>  <p>The metaData file can take two formats, the first of which is the first 6 lines of the standard pedigree file. This is what Plink describes as a .fam file. Note that the sex encoding convention is 1\=male; 2\=female; other\=unknown. An example .fam file is as follows (note that there is no header)\:</p> <pre> CEUTrio NA12878 NA12891 NA12892 2 -9 CEUTrio NA12891 UNKN1 UNKN2 1 -9 CEUTrio NA12892 UNKN3 UNKN4 2 -9 </pre> <p>where the entries are\: FamilyID IndividualID DadID MomID Sex Phenotype.</p> <p>An alternate format is a two-column key-value file\:</p> <pre> NA12878        fid\=CEUTrio;dad\=NA12891;mom\=NA12892;sex\=2;phenotype\=-9 NA12891        fid\=CEUTrio;sex\=1;phenotype\=-9 NA12892        fid\=CEUTrio;sex\=2;phenotype\=-9 </pre> <p>where unknown parents do not need to be specified. The columns are the individual ID and a list of key-value pairs.</p>  <p> Regardless of which file is specified, the tool will output a .fam file alongside the pedigree file. If the command line has "-m [name].fam", the fam file will be subset and reordered to match the sample content and ordering of the VCF. However, if a metadata file of the alternate format is passed by "-m [name].txt", the tool will construct a formatted .fam file from the data. </p>  <h3>Outputs</h3> <p> A binary pedigree in PLINK format, composed of three files (.bed/.bim/.fam). See the <a href\='http\://pngu.mgh.harvard.edu/~purcell/plink/data.shtml\#ped'>PLINK format specification</a> for more details. </p>  <h3>Example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T VariantsToBinaryPed \\ -R reference.fasta \\ -V variants.vcf \\ -m metadata.fam \\ -bed output.bed \\ -bim output.bim \\ -fam output.fam </pre>
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.StandardAnnotation.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.CountMales.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.CompOverlap.help.description=The Broad Institute SOFTWARE COPYRIGHT NOTICE AGREEMENT This software and its documentation are copyright 2009 by the Broad Institute/Massachusetts Institute of Technology. All rights are reserved. <p/> This software is supplied without any warranty or guaranteed support whatsoever. Neither the Broad Institute nor MIT can be responsible for its use, misuse, or functionality.
org.broadinstitute.gatk.tools.walkers.qc.ReadClippingStats.help.summary=Collect read clipping statistics
org.broadinstitute.gatk.tools.walkers.annotator.VariantAnnotatorEngine.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.AlleleBalanceBySample.help.description=Allele balance per sample  <p> This is an experimental annotation that attempts to estimate whether the data supporting a heterozygous genotype call fits allelic ratio expectations, or whether there might be some bias in the data.</p> <h3>Calculation</h3> <p> $$ AB \= \\frac{\# ALT alleles}{total \# alleles} $$ </p> <p> Ideally, the value of AB should be close to 0.5, so half of the alleles support the ref allele and half of the alleles support the alt allele. Divergence from the expected ratio may indicate that there is some bias in favor of one allele. Note the caveats below regarding cancer and RNAseq analysis. </p> <h3>Caveats</h3> <ul> <li>This annotation will only work properly for biallelic heterozygous calls.</li> <li>This annotation cannot currently be calculated for indels.</li> <li>The reasoning underlying this annotation only applies to germline variants in DNA sequencing data. In somatic/cancer analysis, divergent ratios are expected due to tumor heterogeneity. In RNAseq analysis, divergent ratios may indicate differential allele expression.</li> <li>As stated above, this annotation is experimental and should be interpreted with caution as we cannot guarantee that it is appropriate. Basically, use it at your own risk.</li> </ul> <h3>Related annotations</h3> <ul> <li><b><a href\="https\://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_annotator_AlleleBalance.php">AlleleBallance</a></b> is a generalization of this annotation over all samples.</li> <li><b><a href\="https\://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_annotator_DepthPerAlleleBySample.php">DepthPerAlleleBySample</a></b> calculates depth of coverage for each allele per sample.</li> </ul>
org.broadinstitute.gatk.tools.walkers.qc.DocumentationTest.TestEnum.help.description=
org.broadinstitute.gatk.tools.walkers.variantutils.SelectVariants.help.description=Select a subset of variants from a larger callset  <p> Often, a VCF containing many samples and/or variants will need to be subset in order to facilitate certain analyses (e.g. comparing and contrasting cases vs. controls; extracting variant or non-variant loci that meet certain requirements, displaying just a few samples in a browser like IGV, etc.). SelectVariants can be used for this purpose. </p> <p> There are many different options for selecting subsets of variants from a larger callset\: <ul> <li>Extract one or more samples from a callset based on either a complete sample name or a pattern match.</li> <li>Specify criteria for inclusion that place thresholds on annotation values, e.g. "DP > 1000" (depth of coverage greater than 1000x), "AF < 0.25" (sites with allele frequency less than 0.25). These criteria are written as "JEXL expressions", which are documented in the <a href\="http\://www.broadinstitute.org/gatk/guide/article?id\=1255">article about using JEXL expressions</a>.</li> <li>Provide concordance or discordance tracks in order to include or exclude variants that are also present in other given callsets.</li> <li>Select variants based on criteria like their type (e.g. INDELs only), evidence of mendelian violation, filtering status, allelicity, and so on.</li> </ul> </p>  <p>There are also several options for recording the original values of certain annotations that are recalculated when a subsetting the new callset, trimming alleles, and so on.</p>  <h3>Input</h3> <p> A variant call set from which to select a subset. </p>  <h3>Output</h3> <p> A new VCF file containing the selected subset of variants. </p>  <h3>Usage examples</h3> <h4>Select two samples out of a VCF with many samples</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T SelectVariants \\ -R reference.fasta \\ -V input.vcf \\ -o output.vcf \\ -sn SAMPLE_A_PARC \\ -sn SAMPLE_B_ACTG </pre>  <h4>Select two samples and any sample that matches a regular expression</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T SelectVariants \\ -R reference.fasta \\ -V input.vcf \\ -o output.vcf \\ -sn SAMPLE_1_PARC \\ -sn SAMPLE_1_ACTG \\ -se 'SAMPLE.+PARC' </pre>  <h4>Exclude two samples and any sample that matches a regular expression\:</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -R ref.fasta \\ -T SelectVariants \\ --variant input.vcf \\ -o output.vcf \\ -xl_sn SAMPLE_1_PARC \\ -xl_sn SAMPLE_1_ACTG \\ -xl_se 'SAMPLE.+PARC' </pre>  <h4>Select any sample that matches a regular expression and sites where the QD annotation is more than 10\:</h4> <pre> java -Xmx2g -jar GenomeAnalysisTK.jar \\ -R ref.fasta \\ -T SelectVariants \\ -R reference.fasta \\ -V input.vcf \\ -o output.vcf \\ -se 'SAMPLE.+PARC' \\ -select "QD > 10.0" </pre>  <h4>Select any sample that does not match a regular expression and sites where the QD annotation is more than 10\:</h4> <pre> java  -jar GenomeAnalysisTK.jar \\ -R ref.fasta \\ -T SelectVariants \\ --variant input.vcf \\ -o output.vcf \\ -se 'SAMPLE.+PARC' \\ -select "QD > 10.0" -invertSelect </pre>  <h4>Select a sample and exclude non-variant loci and filtered loci (trim remaining alleles by default)\:</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -R ref.fasta \\ -T SelectVariants \\ -R reference.fasta \\ -V input.vcf \\ -o output.vcf \\ -sn SAMPLE_1_ACTG \\ -env \\ -ef </pre>  <h4>Select a sample, subset remaining alleles, but don't trim\:</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T SelectVariants \\ -R reference.fasta \\ -V input.vcf \\ -o output.vcf \\ -sn SAMPLE_1_ACTG \\ -env \\ -noTrim </pre>  <h4>Select a sample and restrict the output vcf to a set of intervals\:</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T SelectVariants \\ -R reference.fasta \\ -V input.vcf \\ -o output.vcf \\ -L /path/to/my.interval_list \\ -sn SAMPLE_1_ACTG </pre>  <h4>Select all calls missed in my vcf, but present in HapMap (useful to take a look at why these variants weren't called in my dataset)\:</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T SelectVariants \\ -R reference.fasta \\ -V hapmap.vcf \\ --discordance myCalls.vcf \\ -o output.vcf \\ -sn mySample </pre>  <h4>Select all calls made by both myCalls and theirCalls (useful to take a look at what is consistent between two callers)\:</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T SelectVariants \\ -R reference.fasta \\ -V myCalls.vcf \\ --concordance theirCalls.vcf \\ -o output.vcf \\ -sn mySample </pre>  <h4>Generating a VCF of all the variants that are mendelian violations. The optional argument '-mvq' restricts the selection to sites that have a QUAL score of 50 or more</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T SelectVariants \\ -R reference.fasta \\ -V input.vcf \\ -ped family.ped \\ -mv -mvq 50 \\ -o violations.vcf </pre>  <h4>Generating a VCF of all the variants that are not mendelian violations. The optional argument '-mvq' together with '-invMv' restricts the selection to sites that have a QUAL score of 50 or less</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T SelectVariants \\ -R reference.fasta \\ -V input.vcf \\ -ped family.ped \\ -mv -mvq 50 -invMv \\ -o violations.vcf </pre>  <h4>Create a set with 50% of the total number of variants in the variant VCF\:</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T SelectVariants \\ -R reference.fasta \\ -V input.vcf \\ -o output.vcf \\ -fraction 0.5 </pre>  <h4>Select only indels between 2 and 5 bases long from a VCF\:</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -R ref.fasta \\ -T SelectVariants \\ -R reference.fasta \\ -V input.vcf \\ -o output.vcf \\ -selectType INDEL --minIndelSize 2 --maxIndelSize 5 </pre>  <h4>Exclude indels from a VCF\:</h4> <pre> java -Xmx2g -jar GenomeAnalysisTK.jar \\ -R ref.fasta \\ -T SelectVariants \\ --variant input.vcf \\ -o output.vcf \\ --selectTypeToExclude INDEL </pre>  <h4>Select only multi-allelic SNPs and MNPs from a VCF (i.e. SNPs with more than one allele listed in the ALT column)\:</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T SelectVariants \\ -R reference.fasta \\ -V input.vcf \\ -o output.vcf \\ -selectType SNP -selectType MNP \\ -restrictAllelesTo MULTIALLELIC </pre>  <h4>Select IDs in fileKeep and exclude IDs in fileExclude\:</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -R ref.fasta \\ -T SelectVariants \\ --variant input.vcf \\ -o output.vcf \\ -IDs fileKeep \\ -excludeIDs fileExclude </pre>  <h4>Select sites where there are between 2 and 5 samples and between 10 and 50 percent of the sample genotypes are filtered\:</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -R ref.fasta \\ -T SelectVariants \\ --variant input.vcf \\ --maxFilteredGenotypes 5 --minFilteredGenotypes 2 --maxFractionFilteredGenotypes 0.60 --minFractionFilteredGenotypes 0.10 </pre>  <h4>Set filtered genotypes to no-call (./.)\:</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -R ref.fasta \\ -T SelectVariants \\ --variant input.vcf \\ --setFilteredGtToNocall </pre>
org.broadinstitute.gatk.tools.walkers.variantutils.LeftAlignAndTrimVariants.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.LowMQ.help.summary=Proportion of low quality reads
org.broadinstitute.gatk.tools.walkers.variantutils.ValidateVariants.help.summary=Validate a VCF file with an extra strict set of criteria
org.broadinstitute.gatk.tools.walkers.variantutils.ValidateVariants.help.description=Validate a VCF file with an extra strict set of criteria  <p> This tool is designed to validate much of the information inside a VCF file. In addition to standard adherence to the VCF specification, this tool performs extra strict validations to ensure the information contained within the file is correct. These include\: </p><p> <dl> <dt>REF</dt><dd>the correctness of the reference base(s).</dd> <dt>CHR_COUNTS</dt><dd>accuracy of AC & AN values.</dd> <dt>IDS</dt><dd>tests against rsIDs when a dbSNP file is provided. Notice that for this one to work, you need to provide a reference to the dbsnp variant containing file using the <code>--dbsnp</code> as show in examples below.</dd> <dt>ALLELES</dt><dd>and that all alternate alleles are present in at least one sample.</dd> </dl>  </p>  <p> By default it will apply all the strict validations unless you indicate which one you want you want to exclude using <code>-Xtype|--validationTypeToExclude &lt;<i>code</i>&gt;</code>, where <i>code</i> is one of the listed above. You can exclude as many types as you want <p> Yo can exclude all strict validations with the special code <code><b>ALL</b></code>. In this case the tool will only test the adherence to the VCF specification. </p>  <h3>Input</h3> <p> A variant set to validate using <code>-V</code> or <code>--variant</code> as shown below. </p>  <h3>Usage examples</h3>  <h4>To perform VCF format tests and all strict validations</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T ValidateVariants \\ -R reference.fasta \\ -V input.vcf \\ --dbsnp dbsnp.vcf </pre>  <h4>To perform VCF format tests and all strict validations with the VCFs containing alleles <\= 208 bases</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T ValidateVariants \\ -R reference.fasta \\ -V input.vcf \\ --dbsnp dbsnp.vcf --reference_window_stop 208 </pre>  <h4>To perform only VCF format tests</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T ValidateVariants \\ -R reference.fasta \\ -V input.vcf \\ <b>--validationTypeToExclude ALL</b> </pre>  <h4>To perform all validations except the strict <i>ALLELE</i> validation</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T ValidateVariants \\ -R reference.fasta \\ -V input.vcf \\ <b>--validationTypeToExclude ALLELES</b> </pre>
org.broadinstitute.gatk.tools.walkers.variantutils.SelectVariants.NumberAlleleRestriction.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.AlleleBalance.help.summary=Allele balance across all samples
org.broadinstitute.gatk.tools.walkers.coverage.GCContentByInterval.help.summary=Calculates the GC content of the reference sequence for each interval
org.broadinstitute.gatk.tools.walkers.qc.CountRODs.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantutils.SelectVariants.help.summary=Select a subset of variants from a larger callset
org.broadinstitute.gatk.tools.walkers.filters.FiltrationContext.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.VariantSummary.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.AnnotationInterfaceManager.help.summary=
org.broadinstitute.gatk.tools.walkers.coverage.DepthOfCoverage.help.description=Assess sequence coverage by a wide array of metrics, partitioned by sample, read group, or library  <p> This tool processes a set of bam files to determine coverage at different levels of partitioning and aggregation. Coverage can be analyzed per locus, per interval, per gene, or in total; can be partitioned by sample, by read group, by technology, by center, or by library; and can be summarized by mean, median, quartiles, and/or percentage of bases covered to or beyond a threshold. Additionally, reads and bases can be filtered by mapping or base quality score. </p>  <h3>Input</h3> <ul> <li>One or more bam files (with proper headers) to be analyzed for coverage statistics</li> <li>(Optional) A REFSEQ file to aggregate coverage to the gene level (for information about creating the REFSEQ Rod, please consult the online documentation)</li> </ul>  <h3>Output</h3> <p> Tables pertaining to different coverage summaries. Suffix on the table files declares the contents\: </p> <ul> <li>no suffix\: per locus coverage</li> <li>_summary\: total, mean, median, quartiles, and threshold proportions, aggregated over all bases</li> <li>_statistics\: coverage histograms (\# locus with X coverage), aggregated over all bases</li> <li>_interval_summary\: total, mean, median, quartiles, and threshold proportions, aggregated per interval</li> <li>_interval_statistics\: 2x2 table of \# of intervals covered to >\= X depth in >\=Y samples</li> <li>_gene_summary\: total, mean, median, quartiles, and threshold proportions, aggregated per gene</li> <li>_gene_statistics\: 2x2 table of \# of genes covered to >\= X depth in >\= Y samples</li> <li>_cumulative_coverage_counts\: coverage histograms (\# locus with >\= X coverage), aggregated over all bases</li> <li>_cumulative_coverage_proportions\: proprotions of loci with >\= X coverage, aggregated over all bases</li> </ul>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T DepthOfCoverage \\ -R reference.fasta \\ -o file_name_base \\ -I input_bams.list [-geneList refSeq.sorted.txt] \\ [-pt readgroup] \\ [-ct 4 -ct 6 -ct 10] \\ [-L my_capture_genes.interval_list] </pre>
org.broadinstitute.gatk.tools.walkers.coverage.DepthOfCoverageStats.help.summary=IF THERE IS NO JAVADOC RIGHT HERE, YELL AT chartl
org.broadinstitute.gatk.tools.walkers.variantutils.VariantsToTable.help.summary=Extract specific fields from a VCF file to a tab-delimited table
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.ThetaVariantEvaluator.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.readutils.ClipReads.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.FunctionalClass.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.MultiallelicSummary.Type.help.summary=
org.broadinstitute.gatk.tools.walkers.fasta.FastaStats.FastaStatistics.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.OneBPIndel.help.description=Stratifies the eval RODs into sites where the indel is 1 bp in length and those where the event is 2+. all non indel events go into all bins, so that SNP counts can be used as contrasts in eval modules.
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.RequiredStratification.help.summary=
org.broadinstitute.gatk.tools.walkers.qc.ReadClippingStats.ReadClippingInfo.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Filter.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.AnnotationInterfaceManager.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.LowMQ.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.AnnotationType.help.description=
org.broadinstitute.gatk.tools.walkers.examples.GATKPaperGenotyper.help.description=A simple Bayesian genotyper, that outputs a text based call format. Intended to be used only as an example in the GATK publication.
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.VariantSummary.Type.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantutils.RandomlySplitVariants.help.summary=Randomly split variants into different sets
org.broadinstitute.gatk.tools.walkers.diagnostics.ErrorRatePerCycle.help.description=Compute the read error rate per position  <p>This tool computes the read error rate per position in sequence reads. It does this in the original 5'->3' orientation that the read had coming off the machine. It then emits a GATKReport containing readgroup, cycle, mismatches, counts, qual, and error rate for each read group in the input BAMs.</p>  <h3>Input</h3> <p> Any number of BAM files </p>  <h3>Output</h3> <p> A GATKReport containing readgroup, cycle, mismatches, counts, qual, and error rate.  For example, running this tool on the NA12878 data sets yields the following table\:  <pre> \#\#\:GATKReport.v0.2 ErrorRatePerCycle \: The error rate per sequenced position in the reads readgroup  cycle  mismatches  counts  qual  errorrate 20FUK.1        0          80   23368    25   3.47e-03 20FUK.1        1          40   23433    28   1.75e-03 20FUK.1        2          36   23453    28   1.58e-03 20FUK.1        3          26   23476    29   1.15e-03 20FUK.1        4          32   23495    29   1.40e-03 up to 101 cycles 20FUK.2        0          77   20886    24   3.73e-03 20FUK.2        1          28   20920    29   1.39e-03 20FUK.2        2          24   20931    29   1.19e-03 20FUK.2        3          30   20940    28   1.48e-03 20FUK.2        4          25   20948    29   1.24e-03 up to 101 cycles 20FUK.3        0          78   22038    24   3.58e-03 20FUK.3        1          40   22091    27   1.86e-03 20FUK.3        2          23   22108    30   1.09e-03 20FUK.3        3          36   22126    28   1.67e-03 </pre> </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T ErrorRatePerCycle \\ -R reference.fasta \\ -I my_sequence_reads.bam \\ -o error_rates.gatkreport.txt </pre>  <h3>Caveat</h3>  <p>When it is run on paired-end sequence data, this tool only uses the first read in a pair.</p>
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.IndelSummary.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.help.description=
org.broadinstitute.gatk.tools.walkers.qc.CountTerminusEvent.help.description=Count the number of reads ending in insertions, deletions or soft-clips  <p>This tool reports the number of reads where the end bases do not map to the reference sequence.</p>  <h3>Input</h3> <p> One or more BAM files. </p>  <h3>Output</h3> <p> Number of reads ending in each category. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T CountTerminusEvent \\ -R reference.fasta \\ -I input.bam \\ -o output.txt \\ [-L input.intervals] </pre>
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.GenotypeAnnotation.help.description=
org.broadinstitute.gatk.tools.walkers.variantutils.VariantsToTable.Getter.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.InfoFieldKey.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.PrintRODs.help.description=Print out all of the RODs in the input data set  <p>This tool reports what RODs (reference ordered data sets) are contained in a given input.</p>
org.broadinstitute.gatk.tools.walkers.coverage.CallableLoci.CalledState.help.summary=
org.broadinstitute.gatk.tools.walkers.qc.CountMales.help.description=Count the number of reads seen from male samples  <p>This tool counts the number of sequence reads seen from samples that are male according to the sample metadata.</p>  <h3>Input</h3> <p> One or more BAM files. </p>  <h3>Output</h3> <p> Number of reads seen from male samples. If an output file name is provided, then the result will be written to that file. Otherwise it will be sent to standard console output. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T CountMales \\ -R reference.fasta \\ -I samples.bam \\ -o output.txt </pre>
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.ThetaVariantEvaluator.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.GenotypeAnnotation.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.InfoFieldKey.help.summary=
org.broadinstitute.gatk.tools.walkers.fasta.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.RodRequiringAnnotation.help.description=
org.broadinstitute.gatk.tools.walkers.coverage.CoverageUtils.CountPileupType.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.MendelianViolationEvaluator.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.VariantAnnotatorEngine.VAExpression.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.EffectImpact.help.description=
org.broadinstitute.gatk.tools.walkers.rnaseq.help.summary=
org.broadinstitute.gatk.tools.walkers.variantutils.VariantsToAllelicPrimitives.help.description=Simplify multi-nucleotide variants (MNPs) into more basic/primitive alleles.  <p>This tool will take an MNP (e.g. ACCCA -> TCCCG) and break it up into separate records for each component part (A-T and A->G).</p>  <h3>Input</h3> <p> A variant set with any type of alleles. </p>  <h3>Output</h3> <p> A VCF with alleles broken into primitive types. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T VariantsToAllelicPrimitives \\ -R reference.fasta \\ -V input.vcf \\ -o output.vcf </pre>  <h3>Caveats</h3> <ul> <li>For now this tool modifies only multi-nucleotide polymorphisms (MNPs) and leaves SNPs, indels, and complex substitutions as is, although one day it may be extended to handle the complex substitution case.</li> <li>This tool modifies only bi-allelic variants.</li> </ul>
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.AnnotationType.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.CompareCallableLoci.help.summary=Compare callability statistics
org.broadinstitute.gatk.tools.walkers.varianteval.util.Molten.help.description=Molten for @Analysis modules.  If you are flagged as a molten analysis, then there must be one and only one annotation in that evaluation module\: @Molten which must have time Map<Object, Object>.  This data set will then be represented in the VE output as\:  variable value key1     value1 key2     value1 ... keyN     valueN  in the output table.  The names of these two fields can be override via annotation values.
org.broadinstitute.gatk.tools.walkers.qc.DocumentationTest.TestEnum.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.readutils.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.VariantEvalReportWriter.help.summary=Class for writing the GATKReport for VariantEval  Accepts a fulled evaluated (i.e., there's no more data coming) set of stratifications and evaluators and supports writing out the data in these evaluators to a GATKReport.
org.broadinstitute.gatk.tools.walkers.filters.ClusteredSnps.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.MendelianViolationEvaluator.help.summary=Mendelian violation detection and counting <p/> a violation looks like\: Suppose dad \= A/B and mom \= C/D The child can be [A or B] / [C or D].
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.manager.StratificationManager.Combiner.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.JexlExpression.help.summary=Stratifies the eval RODs by user-supplied JEXL expressions  See http\://gatkforums.broadinstitute.org/discussion/1255/what-are-jexl-expressions-and-how-can-i-use-them-with-the-gatk for more details
org.broadinstitute.gatk.tools.walkers.fasta.help.description=
org.broadinstitute.gatk.tools.walkers.variantrecalibration.VQSRCalibrationCurve.help.summary=Created by IntelliJ IDEA.
org.broadinstitute.gatk.tools.walkers.qc.CountRODsByRef.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.fasta.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.WorkInProgressAnnotation.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.diffengine.DiffObjects.help.summary=A generic engine for comparing tree-structured objects
org.broadinstitute.gatk.tools.walkers.variantutils.ValidateVariants.ValidationType.help.description=
org.broadinstitute.gatk.tools.walkers.qc.CountReadEvents.help.description=Count the number of read events  <p>This tool counts the number of "events" (I, D, M etc) encountered in the CIGAR strings of the sequence reads.</p>  <h3>Input</h3> <p> One or more BAM files. </p>  <h3>Output</h3> <p> Number of read events for each category, formatted as a GATKReport table. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T CountReadEvents \\ -R reference.fasta \\ -I input.bam \\ -o output.grp \\ [-L input.intervals] </pre>
org.broadinstitute.gatk.tools.walkers.annotator.CompressedDataList.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.filters.VariantFiltration.help.description=Filter variant calls based on INFO and FORMAT annotations  <p> This tool is designed for hard-filtering variant calls based on certain criteria. Records are hard-filtered by changing the value in the FILTER field to something other than PASS. Filtered records will be preserved in the output unless their removal is requested in the command line. </p>  <h3>Input</h3> <p> A variant set to filter. </p>  <h3>Output</h3> <p> A filtered VCF. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T VariantFiltration \\ -R reference.fasta \\ -o output.vcf \\ --variant input.vcf \\ --filterExpression "AB < 0.2 || MQ0 > 50" \\ --filterName "Nov09filters" \\ --mask mask.vcf \\ --maskName InDel </pre>
org.broadinstitute.gatk.tools.walkers.qc.ErrorThrowing.help.summary=A walker that simply throws errors.
org.broadinstitute.gatk.tools.walkers.annotator.ReducibleAnnotationData.help.summary=A class to encapsulate the raw data for classes compatible with the ReducibleAnnotation interface
org.broadinstitute.gatk.tools.walkers.rnaseq.help.description=
org.broadinstitute.gatk.tools.walkers.coverage.DoCOutputType.Partition.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Contig.help.description=Stratifies the evaluation by each contig in the reference sequence
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.manager.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.VariantStratifier.help.summary=
org.broadinstitute.gatk.tools.walkers.fasta.FastaAlternateReferenceMaker.help.description=Generate an alternative reference sequence over the specified interval  <p>Given a variant callset, this tool replaces the reference bases at variation sites with the bases supplied in the corresponding callset records. Additionally, it allows for one or more "snpmask" VCFs to set overlapping bases to 'N'.</p>  <p>The output format can be partially controlled using the provided command-line arguments. Specify intervals with the usual -L argument to output only the reference bases within your intervals. Overlapping intervals are automatically merged; reference bases for each disjoint interval will be output as a separate fasta sequence (named numerically in order).</p>  <h3>Caveats</h3> <ul> <li>If there are multiple variants that start at a site, it chooses one of them randomly.</li> <li>When there are overlapping indels (but with different start positions) only the first will be chosen.</li> <li>This tool works only for SNPs and for simple indels (but not for things like complex substitutions).</li> </ul>  <h3>Input</h3> <p> The reference, requested intervals, and any number of variant ROD files. </p>  <h3>Output</h3> <p> A FASTA file representing the requested intervals. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T FastaAlternateReferenceMaker \\ -R reference.fasta \\ -o output.fasta \\ -L input.intervals \\ -V input.vcf \\ [--snpmask mask.vcf] </pre>
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.ReducibleAnnotation.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.haplotypecaller.HCMappingQualityFilter.help.description=Filter out reads with low mapping qualities for HaplotypeCaller  <p>This filter is applied by default for HaplotypeCaller and is designed to ensure that only reads that are likely to be informative will be used in the reassembly process. It performs the same basic function as the regular MappingQualityFilter, but it is used at specific points in the operation of HC where it is helpful to be able to apply a different quality threshold from the general case.</p>  <h3>Usage example</h3>  <h4>Set the HC-specific mapping quality filter to filter out reads with MAPQ < 10</h4> <pre> java -jar GenomeAnalysisTk.jar \\ -T HaplotypeCaller \\ -R reference.fasta \\ -I input.bam \\ -o output.vcf \\ -mmq 10 </pre>  <p>Note that the HCMappingQuality filter itself does not need to be specified in the command line because it is set automatically for HaplotypeCaller.</p>
org.broadinstitute.gatk.tools.walkers.fasta.FastaStats.FastaStatistics.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.AnnotationHelpUtils.help.description=
org.broadinstitute.gatk.tools.walkers.qc.ReadClippingStats.ReadClippingInfo.help.description=
org.broadinstitute.gatk.tools.walkers.qc.FlagStat.FlagStatus.help.description=
org.broadinstitute.gatk.tools.walkers.qc.CountRODsByRef.help.summary=Count the number of ROD objects encountered along the reference
org.broadinstitute.gatk.tools.walkers.readutils.ClipReads.ClippingData.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.FractionInformativeReads.help.summary=The fraction of reads that were deemed "informative" by the HaplotypeCaller over the entire cohort
org.broadinstitute.gatk.tools.walkers.varianteval.util.Analysis.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.manager.StratificationManager.help.description=Represents the full state space of all stratification combinations
org.broadinstitute.gatk.tools.walkers.filters.FiltrationContextWindow.help.summary=A window of variants surrounding the current variant being investigated
org.broadinstitute.gatk.tools.walkers.qc.FlagStat.help.description=Collect statistics about sequence reads based on their SAM flags  <p>This tool emulates the behavior of 'samtools flagstat'. It collects statistics such as total number of reads, reads with QC failure flag set, number of duplicates, percentage mapped, etc.</p>  <h3>Input</h3> <p> A BAM file containing the sequence data. </p>  <h3>Output</h3> <p> Resulting stats are written to file if an output file name is given (with -o), otherwise output to stdout. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T FlagStat \\ -R reference.fasta \\ -I reads.bam \\ [-o output.txt] </pre>
org.broadinstitute.gatk.tools.walkers.help.help.description=
org.broadinstitute.gatk.tools.walkers.coverage.CallableLoci.CallableBaseState.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.FunctionalClass.FunctionalType.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.EffectType.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.EffectFunctionalClass.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.util.Molten.help.summary=Molten for @Analysis modules.
org.broadinstitute.gatk.tools.walkers.fasta.FastaSequence.help.description=
org.broadinstitute.gatk.tools.walkers.variantutils.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.util.EvaluationContext.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.AlleleSpecificAnnotationData.help.summary=A class to encapsulate the raw data for allele-specific classes compatible with the ReducibleAnnotation interface
org.broadinstitute.gatk.tools.walkers.fasta.FastaSequence.version=3.5-1-g3d809e3
build.timestamp=2016/05/24 13\:45\:42
org.broadinstitute.gatk.tools.walkers.variantutils.RandomlySplitVariants.help.description=Randomly split variants into different sets  <p>This tool takes a VCF file, randomly splits variants into different sets, and writes the results to separate files. By default the tool splits the input into two new sets, but it can be made to output more than two separate call sets.</p>  <h3>Input</h3> <p> A variant call set to split. </p>  <h3>Output</h3> <p> The new callsets. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T RandomlySplitVariants \\ -R reference.fasta \\ -V input.vcf \\ -o1 output_1.vcf \\ -o2 output_2.vcf </pre>
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.help.description=
org.broadinstitute.gatk.tools.walkers.coverage.DepthOfCoverageStats.help.description=IF THERE IS NO JAVADOC RIGHT HERE, YELL AT chartl
org.broadinstitute.gatk.tools.walkers.coverage.CoverageUtils.help.description=IF THERE IS NO JAVADOC RIGHT HERE, YELL AT chartl
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.FunctionalClass.FunctionalType.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.ActiveRegionBasedAnnotation.help.description=
org.broadinstitute.gatk.tools.walkers.coverage.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.VariantSummary.Type.help.summary=
org.broadinstitute.gatk.tools.walkers.diffengine.DiffObjects.help.description=A generic engine for comparing tree-structured objects  <p> This tool compares two record-oriented files, itemizing specific difference between equivalent records in the two files.  Reports both itemized and summarized differences. </p>  <h3>What are the summarized differences and the DiffObjectsWalker?</h3>  <p> The GATK contains a summarizing difference engine that compares hierarchical data structures to emit\: <ul> <li>A list of specific differences between the two data structures.  This is similar to saying the value in field A in record 1 in file F differences from the value in field A in record 1 in file G.</li> <li>A summarized list of differences ordered by frequency of the difference.  This output is similar to saying field A in 50 records in files F and G differed.</li> </ul> </p>  <p> The GATK contains a private walker DiffObjects that allows you access to the DiffEngine capabilities on the command line.  Simply provide the walker with the master and test files and it will emit summarized differences for you. </p>  <h3>Why?</h3>  <p> The reason for this system is that it allows you to compare two structured files -- such as BAMs and VCFs -- for common differences among them.  This is primarily useful in regression testing or optimization, where you want to ensure that the differences are those that you expect and not any others. </p>  <h3>Input</h3> <p> The DiffObjectsWalker works with BAM or VCF files. </p>  <h3>Output</h3> <p> The DiffEngine system compares to two hierarchical data structures for specific differences in the values of named nodes.  Suppose I have two trees\: <pre> Tree1\=(A\=1 B\=(C\=2 D\=3)) Tree2\=(A\=1 B\=(C\=3 D\=3 E\=4)) Tree3\=(A\=1 B\=(C\=4 D\=3 E\=4)) </pre> <p> where every node in the tree is named, or is a raw value (here all leaf values are integers).  The DiffEngine traverses these data structures by name, identifies equivalent nodes by fully qualified names (Tree1.A is distinct from Tree2.A, and determines where their values are equal (Tree1.A\=1, Tree2.A\=1, so they are). These itemized differences are listed as\: <pre> Tree1.B.C\=2 \!\= Tree2.B.C\=3 Tree1.B.C\=2 \!\= Tree3.B.C\=4 Tree2.B.C\=3 \!\= Tree3.B.C\=4 Tree1.B.E\=MISSING \!\= Tree2.B.E\=4 </pre>  <p> This conceptually very similar to the output of the unix command line tool diff.  What's nice about DiffEngine though is that it computes similarity among the itemized differences and displays the count of differences names in the system.  In the above example, the field C is not equal three times, while the missing E in Tree1 occurs only once.  So the summary is\:  <pre> *.B.C \: 3 *.B.E \: 1 </pre>  <p> where the * operator indicates that any named field matches.  This output is sorted by counts, and provides an immediate picture of the commonly occurring differences among the files. <p> Below is a detailed example of two VCF fields that differ because of a bug in the AC, AF, and AN counting routines, detected by the integrationtest integration (more below).  You can see that in the although there are many specific instances of these differences between the two files, the summarized differences provide an immediate picture that the AC, AF, and AN fields are the major causes of the differences. <p>  <pre> [testng] path                                                             count [testng] *.*.*.AC                                                         6 [testng] *.*.*.AF                                                         6 [testng] *.*.*.AN                                                         6 [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20\:10000000.AC  1 [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20\:10000000.AF  1 [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20\:10000000.AN  1 [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20\:10000117.AC  1 [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20\:10000117.AF  1 [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20\:10000117.AN  1 [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20\:10000211.AC  1 [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20\:10000211.AF  1 [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20\:10000211.AN  1 [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20\:10000598.AC  1 </pre>  <h3>Caveat</h3> <p>Because this is a walker, it requires that you pass a reference file. However the reference is not actually used, so it does not matter what you pass as reference.</p>
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.JexlExpression.help.description=Stratifies the eval RODs by user-supplied JEXL expressions  See http\://gatkforums.broadinstitute.org/discussion/1255/what-are-jexl-expressions-and-how-can-i-use-them-with-the-gatk for more details
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.RequiredStratification.help.description=
org.broadinstitute.gatk.tools.walkers.qc.CountRODs.Datum.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantutils.SelectHeaders.help.description=Selects headers from a VCF source  <p> Often, a VCF containing many headers will need to be subset in order to facilitate certain formatting guidelines. SelectHeaders can be used for this purpose. Given a single VCF file, one or more headers can be extracted from the file (based on a complete header name or a pattern match). <p/> <h3>Input</h3> <p> A set of VCFs. </p> <p/> <h3>Output</h3> <p> A VCF with the selected headers. </p>  <h3>Usage examples</h3> <h4>Select only the FILTER, FORMAT, and INFO headers</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T SelectHeaders \\ -R reference.fasta \\ -V input.vcf \\ -o output.vcf \\ -hn FILTER \\ -hn FORMAT \\ -hn INFO </pre>  <h4>Select only the FILTER, FORMAT, and INFO headers and add in the reference file names</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T SelectHeaders \\ -R reference.fasta \\ -V input.vcf \\ -o output.vcf \\ -hn FILTER \\ -hn FORMAT \\ -hn INFO \\ -irn \\ -iln </pre>  <h4>Select only the FILTER, FORMAT, and INFO headers, plus any headers with "SnpEff"</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T SelectHeaders \\ -R reference.fasta \\ -V input.vcf \\ -o output.vcf \\ -hn FILTER \\ -hn FORMAT \\ -hn INFO \\ -he '.*SnpEff.*' </pre>
org.broadinstitute.gatk.tools.walkers.varianteval.util.Molten.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.diagnostics.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.util.SortableJexlVCMatchExp.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.ReducibleAnnotationData.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantutils.VariantsToTable.Getter.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.util.Analysis.help.summary=
org.broadinstitute.gatk.tools.walkers.variantutils.ConcordanceMetrics.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.manager.help.description=
org.broadinstitute.gatk.tools.walkers.filters.ClusteredSnps.help.description=
org.broadinstitute.gatk.tools.walkers.coverage.DoCOutputType.FileType.help.summary=
org.broadinstitute.gatk.tools.walkers.coverage.CoverageUtils.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.FlagStat.help.summary=Collect statistics about sequence reads based on their SAM flags
org.broadinstitute.gatk.tools.walkers.filters.ClusteredSnps.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.StandardAnnotation.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.util.AnalysisModuleScanner.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.examples.GATKDocsExample.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantutils.GenotypeConcordance.help.summary=Genotype concordance between two callsets
org.broadinstitute.gatk.tools.walkers.varianteval.util.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.CheckPileup.help.description=Compare GATK's internal pileup to a reference Samtools pileup  <p>At every locus in the input set, compares the pileup data (reference base, aligned base from each overlapping read, and quality score) generated internally by GATK to a reference pileup data generated by Samtools. Note that the pileup program has been replaced in Samtools by mpileup, which produces a slightly different output format by default. </p>  <h3>Format</h3> <p>There are two versions of the original pileup format\: the current 6-column format produced by Samtools, and the old 10-column "consensus" format which could be obtained by using the -c argument, now deprecated.</p> <h4>Simple pileup\: 6-column format</h4> <p> Each line consists of chromosome, 1-based coordinate, reference base, the number of reads covering the site, read bases and base qualities. At the read base column, a dot stands for a match to the reference base on the forward strand, a comma for a match on the reverse strand, `ACGTN' for a mismatch on the forward strand and `acgtn' for a mismatch on the reverse strand. A pattern `\\+[0-9]+[ACGTNacgtn]+' indicates there is an insertion between this reference position and the next reference position. The length of the insertion is given by the integer in the pattern, followed by the inserted sequence. </p> <pre> seq1 272 T 24  ,.$.....,,.,.,...,,,.,..^+. <<<+;<<<<<<<<<<<\=<;<;7<& seq1 273 T 23  ,.....,,.,.,...,,,.,..A <<<;<<<<<<<<<3<\=<<<;<<+ seq1 274 T 23  ,.$....,,.,.,...,,,.,...    7<7;<;<<<<<<<<<\=<;<;<<6 seq1 275 A 23  ,$....,,.,.,...,,,.,...^l.  <+;9*<<<<<<<<<\=<<\:;<<<< seq1 276 G 22  ...T,,.,.,...,,,.,....  33;+<<7\=7<<7<&<<1;<<6< seq1 277 T 22  ....,,.,.,.C.,,,.,..G.  +7<;<<<<<<<&<\=<<\:;<<&< seq1 278 G 23  ....,,.,.,...,,,.,....^k.   %38*<<;<7<<7<\=<<<;<<<<< seq1 279 C 23  A..T,,.,.,...,,,.,..... ;75&<<<<<<<<<\=<<<9<<\:<< </pre> <p> See the <a href\="http\://samtools.sourceforge.net/pileup.shtml">Pileup format documentation</a> for more details. </p>  <h4>Consensus pileup\: 10/13-column format</h4> <p>The "consensus" or extended pileup consists of the following\: <ul> <li>original 6 columns as described above</li> <li>4 extra columns representing consensus values (consensus base, consensus quality, variant quality and maximum mapping quality of the reads covering the sites) for all sites, inserted before the bases and quality strings</li> <li>3 extra columns indicating counts of reads supporting indels (just for indel sites)</li> </ul> </p> <h4>Example of consensus pileup for SNP or non-variant sites</h4> <pre> seq1  60  T  T  66  0  99  13  ...........^~.^~.   9<<55<;<<<<<< seq1  61  G  G  72  0  99  15  .............^~.^y. (;975&;<<<<<<<< seq1  62  T  T  72  0  99  15  .$..............    <;;,55;<<<<<<<< seq1  63  G  G  72  0  99  15  .$.............^~.  4;2;<7\:+<<<<<<< seq1  64  G  G  69  0  99  14  ..............  9+5<;;;<<<<<<< seq1  65  A  A  69  0  99  14  .$............. <5-2<;;<<<<<<; seq1  66  C  C  66  0  99  13  .............   &*<;;<<<<<<8< seq1  67  C  C  69  0  99  14  .............^~.    ,75<.4<<<<<-<< seq1  68  C  C  69  0  99  14  ..............  576<;7<<<<<8<< * </pre>  <h4>Example of consensus pileup for indels</h4> <pre> Escherichia_coli_K12\t3995037\t*\t*\\/*\t430\t0\t37\t144\t*\t+A\t143\t1\t0 Escherichia_coli_K12\t3995279\t*\t*\\/*\t202\t0\t36\t68\t*\t+A\t67\t1\t0 Escherichia_coli_K12\t3995281\t*\t*\\/*\t239\t0\t36\t67\t*\t-CG\t66\t1\t0 </pre> <p> See <a href\="http\://samtools.sourceforge.net/cns0.shtml/">Consensus pileup format (deprecated)</a> for more details. </p>  <h3>Input</h3> <p>A BAM file containing your aligned sequence data and a pileup file generated by Samtools covering the region you want to examine.</p>  <h3>Output</h3> <p>A text file listing mismatches between the input pileup and the GATK's internal pileup. If there are no mismatches, the output file is empty.</p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T CheckPileup \\ -R reference.fasta \\ -I your_data.bam \\ --pileup\:SAMPileup pileup_file.txt \\ -L chr1\:257-275 \\ -o output_file_name </pre>
org.broadinstitute.gatk.tools.walkers.qc.CountReads.help.description=Count the number of reads  <p> This is especially useful in combination with read filters (see the --read-filter command line argument) which allow you to count reads matching specific criteria (e.g. read group tags or quality parameters). </p>   <h3>Input</h3> <p> One or more BAM files. </p>  <h3>Output</h3> <p> Number of reads seen. This is output to the terminal/stdout. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -R reference.fasta \\ -T CountReads \\ -I input.bam \\ [-L input.intervals] </pre>
org.broadinstitute.gatk.tools.walkers.annotator.VariantAnnotator.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.DoCOutputType.Partition.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.AS_StandardAnnotation.help.summary=Created by gauthier on 9/28/15.
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.help.description=
org.broadinstitute.gatk.tools.walkers.variantutils.SelectVariants.NumberAlleleRestriction.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.BaseCounts.help.description=Count of A, C, G, T bases across all samples  <p> This annotation returns the counts of A, C, G, and T bases across all samples, in that order.</p> <h3>Example\:</h3>  <pre>BaseCounts\=3,0,3,0</pre>  <p> This means the number of A bases seen is 3, the number of T bases seen is 0, the number of G bases seen is 3, and the number of T bases seen is 0. </p>  <h3>Related annotations</h3> <ul> <li><b><a href\="https\://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_annotator_NBaseCount.php">NBaseCount</a></b> counts the percentage of N bases.</li> </ul>
org.broadinstitute.gatk.tools.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.util.DataPoint.help.summary=
org.broadinstitute.gatk.tools.walkers.coverage.DoCOutputType.FileType.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.MappingQualityZeroBySample.help.description=Count of reads with mapping quality zero for each sample  <p>This annotation gives you the count of all reads that have MAPQ \= 0 for each sample. The count of reads with MAPQ0 can be used for quality control; high counts typically indicate regions where it is difficult to make confident calls.</p>  <h3>Caveat</h3> <p>It is not useful to apply this annotation with HaplotypeCaller because HC filters out all reads with MQ0 upfront, so the annotation will always return a value of 0.</p>  <h3>Related annotations</h3> <ul> <li><b><a href\="https\://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_annotator_MappingQualityZero.php">MappingQualityZero</a></b> gives the count of reads with MAPQ\=0 across all samples.</li> <li><b><a href\="https\://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_annotator_LowMQ.php">LowMQ</a></b> gives the proportion of reads with low mapping quality (MAPQ below 10, including 0).</li> </ul>
org.broadinstitute.gatk.tools.walkers.qc.ReadClippingStats.ReadClippingInfo.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.readutils.PrintReads.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.CountIntervals.help.summary=Count contiguous regions in an interval list
org.broadinstitute.gatk.tools.CatVariants.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.DepthOfCoverage.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.readutils.ClipReads.ReadClipperWithData.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.CountVariants.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.SnpEffEffect.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantutils.ValidateVariants.ValidationType.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.StandardStratification.help.summary=
org.broadinstitute.gatk.tools.walkers.coverage.CallableLoci.CalledState.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Contig.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.util.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.ReducibleAnnotation.help.description=An interface for annotations that are calculated using raw data across samples, rather than the median (or median of median) of samples values
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.IndelSize.help.description=Stratifies the eval RODs by the indel size  Indel sizes are stratified from sizes -100 to +100. Sizes greater than this are lumped in the +/- 100 bin This stratification ignores multi-allelic indels (whose size is not defined uniquely)
org.broadinstitute.gatk.tools.walkers.qc.CountLoci.help.description=Count the total number of covered loci  <p> This tool counts the number of loci (positions in the reference) that are covered by sequence data. </p>  <h3>Input</h3> <p> One or more BAM files. </p>  <h3>Output</h3> <p> Number of loci traversed. If an output file name is provided, then the result will be written to that file. Otherwise it will be sent to standard console output. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T CountLoci \\ -R reference.fasta \\ -I input.bam \\ -o output.txt \\ [-L input.intervals] </pre>
org.broadinstitute.gatk.tools.walkers.annotator.VariantAnnotatorEngine.help.summary=
org.broadinstitute.gatk.tools.walkers.variantutils.SelectVariants.NumberAlleleRestriction.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.VariantAnnotatorAnnotation.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.FunctionalClass.FunctionalType.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.IndelLengthHistogram.help.description=Simple utility for histogramming indel lengths  Based on code from chartl
org.broadinstitute.gatk.tools.walkers.filters.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.AlleleCount.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.readutils.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.VariantOverlapAnnotator.help.description=Annotate the ID field and attribute overlap FLAGs for a VariantContext against a RefMetaDataTracker or a list of VariantContexts
org.broadinstitute.gatk.tools.walkers.qc.CountReads.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.diagnostics.ReadLengthDistribution.help.description=Collect read length statistics  <p> This tool generates a table with the read lengths categorized per sample. If the file has no sample information (no read groups) it considers all reads to come from the same sample. </p>   <h3>Input</h3> <p> A BAM file. </p>  <h3>Output</h3> <p> A human/R-readable table of tab-separated values with one column per sample and one row per read. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T ReadLengthDistribution \\ -R reference.fasta \\ -I example.bam \\ -o example.tbl </pre>
org.broadinstitute.gatk.tools.walkers.rnaseq.ASEReadCounter.OUTPUT_FORMAT.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.CallableLoci.help.description=Collect statistics on callable, uncallable, poorly mapped, and other parts of the genome  <p> A very common question about a NGS set of reads is what areas of the genome are considered callable. This tool considers the coverage at each locus and emits either a per base state or a summary interval BED file that partitions the genomic intervals into the following callable states\: <dl> <dt>REF_N</dt> <dd>The reference base was an N, which is not considered callable the GATK</dd> <dt>PASS</dt> <dd>The base satisfied the min. depth for calling but had less than maxDepth to avoid having EXCESSIVE_COVERAGE</dd> <dt>NO_COVERAGE</dt> <dd>Absolutely no reads were seen at this locus, regardless of the filtering parameters</dd> <dt>LOW_COVERAGE</dt> <dd>There were fewer than min. depth bases at the locus, after applying filters</dd> <dt>EXCESSIVE_COVERAGE</dt> <dd>More than -maxDepth read at the locus, indicating some sort of mapping problem</dd> <dt>POOR_MAPPING_QUALITY</dt> <dd>More than --maxFractionOfReadsWithLowMAPQ at the locus, indicating a poor mapping quality of the reads</dd> </dl> </p> <p/> <h3>Input</h3> <p> A BAM file containing <b>exactly one sample</b>. </p> <p/> <h3>Output</h3> <p> A file with the callable status covering each base and a table of callable status x count of all examined bases </p> <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T CallableLoci \\ -R reference.fasta \\ -I myreads.bam \\ -summary table.txt \\ -o callable_status.bed </pre> <p/> would produce a BED file that looks like\: <p/> <pre> 20 10000000 10000864 PASS 20 10000865 10000985 POOR_MAPPING_QUALITY 20 10000986 10001138 PASS 20 10001139 10001254 POOR_MAPPING_QUALITY 20 10001255 10012255 PASS 20 10012256 10012259 POOR_MAPPING_QUALITY 20 10012260 10012263 PASS 20 10012264 10012328 POOR_MAPPING_QUALITY 20 10012329 10012550 PASS 20 10012551 10012551 LOW_COVERAGE 20 10012552 10012554 PASS 20 10012555 10012557 LOW_COVERAGE 20 10012558 10012558 PASS </pre> as well as a summary table that looks like\: <p/> <pre> state nBases REF_N 0 PASS 996046 NO_COVERAGE 121 LOW_COVERAGE 928 EXCESSIVE_COVERAGE 0 POOR_MAPPING_QUALITY 2906 </pre>
org.broadinstitute.gatk.tools.walkers.qc.DocumentationTest.TestEnum.help.summary=
org.broadinstitute.gatk.tools.walkers.coverage.CallableLoci.OutputFormat.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.util.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.ErrorThrowing.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.VariantEvaluator.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.Pileup.help.description=Print read alignments in Pileup-style format  <p>This tool emulates the 'samtools pileup' command. It prints the alignment in a format that is very similar to the Samtools pileup format (see the <a href\="http\://samtools.sourceforge.net/pileup.shtml">Pileup format documentation</a> for more details about the original format). There is one line per genomic position, listing the chromosome name, coordinate, reference base, read bases, and read qualities. In addition to these default fields, additional information can be added to the output as extra columns; see options detailed below.</p>  <h4>Emulated command\:</h4> <pre> samtools pileup -f in.ref.fasta -l in.site_list input.bam </pre>  <h3>Input</h3> <p> A BAM file and the interval to print. </p>  <h3>Output</h3> <p> Alignment of reads formatted in the Pileup style. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T Pileup \\ -R reference.fasta \\ -I my_reads.bam \\ -L chr1\:257-267 -o output.txt </pre> <h4>Expected output</h4> <pre> chr1 257 A CAA '&\= chr1 258 C TCC A\:\= chr1 259 C CCC )A\= chr1 260 C ACC (\=< chr1 261 T TCT '44 chr1 262 A AAA '?\: chr1 263 A AGA 1'6 chr1 264 C TCC 987 chr1 265 C CCC (@( chr1 266 C GCC ''\= chr1 267 T AAT 7%> </pre>
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.EffectCoding.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.CpG.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Degeneracy.help.description=Experimental stratification by the degeneracy of an amino acid, according to VCF annotation.  Not safe
org.broadinstitute.gatk.tools.walkers.readutils.PrintReads.help.summary=Write out sequence read data (for filtering, merging, subsetting etc)
org.broadinstitute.gatk.tools.walkers.qc.DocumentationTest.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.help.WalkerDoclet.help.description=GATKDocs for walkers. Specifically, allows testing of documentation.
org.broadinstitute.gatk.tools.walkers.annotator.AlleleSpecificAnnotationData.help.description=A class to encapsulate the raw data for allele-specific classes compatible with the ReducibleAnnotation interface
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.EffectFunctionalClass.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.SnpEffUtil.help.description=Created with IntelliJ IDEA. User\: farjoun Date\: 6/5/13 Time\: 12\:06 PM To change this template use File | Settings | File Templates.
org.broadinstitute.gatk.tools.walkers.readutils.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.VariantEval.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.readutils.SplitSamFile.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.diagnostics.ErrorRatePerCycle.help.summary=Compute the read error rate per position
org.broadinstitute.gatk.tools.walkers.qc.DocumentationTest.help.summary=Summary test
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.IntervalStratification.help.description=Stratifies the variants by whether they overlap an interval in the set provided on the command line.  The primary use of this stratification is to provide a mechanism to divide asssessment of a call set up by whether a variant overlaps an interval or not.  I use this to differentiate between variants occurring in CCDS exons vs. those in non-coding regions, in the 1000G call set, using a command line that looks like\:  -T VariantEval -R human_g1k_v37.fasta -eval 1000G.vcf -stratIntervals\:BED ccds.bed -ST IntervalStratification  Note that the overlap algorithm properly handles symbolic alleles with an INFO field END value.  In order to safely use this module you should provide entire contigs worth of variants, and let the interval strat decide overlap, as opposed to using -L which will not properly work with symbolic variants.
org.broadinstitute.gatk.tools.walkers.coverage.CallableLoci.OutputFormat.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.GCContentByInterval.help.description=Calculates the GC content of the reference sequence for each interval   <h3>Input</h3> <p> A reference file </p>  <h3>Output</h3> <p> GC content calculations per interval. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T GCContentByInterval \\ -R reference.fasta \\ -o output.txt \\ -L input.intervals </pre>
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.StandardEval.help.summary=
org.broadinstitute.gatk.tools.walkers.fasta.FastaAlternateReferenceMaker.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Filter.help.description=Stratifies by the FILTER status (PASS, FAIL) of the eval records
org.broadinstitute.gatk.tools.walkers.qc.ReadClippingStats.help.description=Collect read clipping statistics  <p>This tool collects statistics about the read length, number of clipping events, and length of the clipping in all reads in the dataset.</p>  <h3>Input</h3> One or more BAM files.  <h3>Output</h3> A simple tabulated text file with read length and clipping statistics for every read (or every given number of reads if the "skip" option is used).  <h3>Caveat</h3> <p>This tool ignores "N" events in the CIGAR string.</p>
org.broadinstitute.gatk.tools.walkers.varianteval.util.DataPoint.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.DoCOutputType.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantutils.VariantsToAllelicPrimitives.help.summary=Simplify multi-nucleotide variants (MNPs) into more basic/primitive alleles.
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.AnnotatorCompatible.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.InfoFieldKey.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.util.SortableJexlVCMatchExp.help.description=
org.broadinstitute.gatk.tools.walkers.fasta.FastaReferenceMaker.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.Pileup.help.summary=Print read alignments in Pileup-style format
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.VariantType.help.description=Stratifies the eval variants by their type (SNP, INDEL, ETC)
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.manager.Stratifier.help.description=A basic interface for a class to be used with the StratificationManager system
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.manager.Stratifier.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.fasta.FastaReferenceMaker.help.description=Create a subset of a FASTA reference sequence  <p>This tool creates a new reference in FASTA format consisting of only those positions or intervals provided in the input data set. The output format can be partially controlled using the provided command-line arguments. Specify intervals with the usual -L argument to output only the reference bases within your intervals. Overlapping intervals are automatically merged; reference bases for each disjoint interval will be output as a separate fasta sequence (named numerically in order).</p>  <h3>Input</h3> <p> The reference and requested intervals. </p>  <h3>Output</h3> <p> A fasta file representing the requested intervals. Each interval has a description line starting with a greater-than (">") symbol followed by sequence data. The description begins with the contig name followed by the beginning position on the contig. <pre> For example, the fasta file for contig 1 and intervals 1\:3-1\:4 and 1\:6-1\:9 >1 1\:3 AT >1 1\:6 GGGG </pre> </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T FastaReferenceMaker \\ -R reference.fasta \\ -o output.fasta \\ -L input.intervals </pre>
org.broadinstitute.gatk.tools.walkers.variantutils.LeftAlignAndTrimVariants.help.description=Left-align indels in a variant callset  <p> LeftAlignAndTrimVariants is a tool that takes a VCF file, left-aligns the indels and trims common bases from indels, leaving them with a minimum representation. The same indel can often be placed at multiple positions and still represent the same haplotype. While the standard convention with VCF is to place an indel at the left-most position this isn't always done, so this tool can be used to left-align them. This tool optionally splits multiallelic sites into biallelics and left-aligns individual alleles. Optionally, the tool will not trim common bases from indels. </p>  <h3>Input</h3> <p> A variant call set to left-align and trim. </p>  <h3>Output</h3> <p> A left-aligned VCF. </p>  <h3>Usage examples</h3>  <h4>Left align and trim alleles</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T LeftAlignAndTrimVariants \\ -R reference.fasta \\ --variant input.vcf \\ -o output.vcf </pre>  <h4>Left align and don't trim alleles</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T LeftAlignAndTrimVariants \\ -R reference.fasta \\ --variant input.vcf \\ -o output.vcf \\ --dontTrimAlleles </pre>  <h4>Left align and trim alleles, process alleles <\= 208 bases</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T LeftAlignAndTrimVariants \\ -R reference.fasta \\ --variant input.vcf \\ -o output.vcf \\ --reference_window_stop 208 </pre>  <h4>Split multiallics into biallelics, left align and trim alleles</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T LeftAlignAndTrimVariants \\ -R reference.fasta \\ --variant input.vcf \\ -o output.vcf \\ --splitMultiallelics </pre>  <h4>Split multiallelics into biallics, left align but don't trim alleles</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T LeftAlignAndTrimVariants \\ -R reference.fasta \\ --variant input.vcf \\ -o output.vcf \\ --splitMultiallelics \\ --dontTrimAlleles </pre>
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.PrintMissingComp.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.manager.StratificationManager.help.summary=Represents the full state space of all stratification combinations
org.broadinstitute.gatk.tools.walkers.help.WalkerDocumentationHandler.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.CompOverlap.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.AlleleCount.help.summary=Stratifies the eval RODs by the allele count of the alternate allele  Looks first at the MLEAC value in the INFO field, and uses that value if present.
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Novelty.help.description=Stratifies by whether a site in in the list of known RODs (e.g., dbsnp by default)
org.broadinstitute.gatk.tools.walkers.examples.GATKDocsExample.help.summary=[Short one sentence description of this walker]
org.broadinstitute.gatk.tools.walkers.coverage.DoCOutputType.FileType.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.CallableLoci.CallableBaseState.help.summary=
org.broadinstitute.gatk.tools.walkers.rnaseq.ASEReadCounter.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.StandardUGAnnotation.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.NBaseCount.help.description=Percentage of N bases  <p>N occurs in a sequence when the sequencer does not have enough information to determine which base it should call. The presence of many Ns at the same site lowers our confidence in any calls made there, because it suggests that there was some kind of technical difficulty that interfered with the sequencing process.</p>  <h3>Note</h3> <p>In GATK versions 3.2 and earlier, this annotation only counted N bases from reads generated with SOLiD technology. This functionality was generalized for all sequencing platforms in GATK version 3.3.</p>  <h3>Related annotations</h3> <ul> <li><b><a href\="https\://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_annotator_BaseCounts.php">BaseCounts</a></b> counts the number of A, C, G, T bases across all samples.</li> </ul>
org.broadinstitute.gatk.tools.walkers.qc.FlagStat.FlagStatus.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.VariantAnnotator.help.description=Annotate variant calls with context information  <p> This tool is designed to annotate variant calls based on their context (as opposed to functional annotation). Various annotation modules are available; see the <a href\="https\://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_annotator_VariantAnnotator.php\#VariantAnnotations">documentation</a> for a complete list.  <h3>Input</h3> <p> A variant set to annotate and optionally one or more BAM files. </p>  <h3>Output</h3> <p> An annotated VCF. </p>  <h3>Usage examples</h3> <br />  <h4>Annotate a VCF with dbSNP IDs and depth of coverage for each sample</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -R reference.fasta \\ -T VariantAnnotator \\ -I input.bam \\ -o output.vcf \\ -A Coverage \\ -V input.vcf \\ -L input.vcf \\ --dbsnp dbsnp.vcf </pre>  <h4>Annotate a VCF with allele frequency by an external resource. Annotation will only occur if there is allele concordance between the resource and the input VCF </h4> <pre> java -jar GenomeAnalysisTK.jar \\ -R reference.fasta \\ -T VariantAnnotator \\ -I input.bam \\ -o output.vcf \\ -V input.vcf \\ -L input.vcf \\ --resource\:foo resource.vcf -E foo.AF --resourceAlleleConcordance </pre>  <h4>Annotate with AF and FILTER fields from an external resource </h4> <pre> java -jar GenomeAnalysisTK.jar \\ -R reference.fasta \\ -T VariantAnnotator \\ -o output.vcf \\ --resource\:foo resource.vcf \\ --expression foo.AF \\ --expression foo.FILTER \\ -V input.vcf \\ </pre>
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.EffectCoding.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.CompressedDataList.help.description=A class to represent data as a list of <value,count> pairs.  For example, the list 2,2,2,2,2,2,3,4,4,4,5,5 would be compressed as 2,6,3,1,4,3,5,2. The compressed list should be sorted in ascending order by value.  Created by gauthier on 9/25/15.
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.IntervalStratification.help.summary=Stratifies the variants by whether they overlap an interval in the set provided on the command line.
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.VariantStratifier.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.rnaseq.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.IndelSummary.help.description=
org.broadinstitute.gatk.tools.walkers.filters.VariantFiltration.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.AlleleCount.help.description=Stratifies the eval RODs by the allele count of the alternate allele  Looks first at the MLEAC value in the INFO field, and uses that value if present. If not present, it then looks for the AC value in the INFO field.  If both are absent, it computes the AC from the genotypes themselves.  If no AC can be computed, 0 is used.
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.manager.StratificationManager.Combiner.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.InfoFieldAnnotation.help.summary=
org.broadinstitute.gatk.tools.walkers.variantutils.help.summary=
org.broadinstitute.gatk.tools.walkers.help.WalkerDoclet.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.CatVariants.help.summary=Concatenate VCF files of non-overlapping genome intervals, all with the same set of samples
org.broadinstitute.gatk.tools.walkers.coverage.CallableLoci.OutputFormat.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.PrintMissingComp.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.util.EvaluationContext.help.summary=
org.broadinstitute.gatk.tools.walkers.readutils.ClipReads.ReadClipperWithData.help.summary=
org.broadinstitute.gatk.tools.walkers.coverage.CallableLoci.Integrator.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.util.VariantEvalUtils.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.ExperimentalAnnotation.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantrecalibration.VQSRCalibrationCurve.help.description=Created by IntelliJ IDEA. User\: depristo Date\: 3/11/11 Time\: 10\:33 AM To change this template use File | Settings | File Templates.
org.broadinstitute.gatk.tools.walkers.haplotypecaller.help.description=
org.broadinstitute.gatk.tools.walkers.filters.FiltrationContext.help.description=
org.broadinstitute.gatk.tools.walkers.qc.CountRODs.Datum.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.SnpEffEffect.help.summary=Helper class to parse, validate, and store a single SnpEff effect and its metadata.
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.InfoFieldAnnotation.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.InfoFieldAnnotation.help.description=
org.broadinstitute.gatk.tools.walkers.qc.RodSystemValidation.help.description=a walker for validating (in the style of validating pile-up) the ROD system.
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.IndelSize.help.summary=Stratifies the eval RODs by the indel size  Indel sizes are stratified from sizes -100 to +100.
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.StandardEval.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.util.VariantEvalUtils.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.AlleleBalanceBySample.help.summary=Allele balance per sample
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.ValidationReport.help.summary=The Broad Institute SOFTWARE COPYRIGHT NOTICE AGREEMENT This software and its documentation are copyright 2009 by the Broad Institute/Massachusetts Institute of Technology.
org.broadinstitute.gatk.tools.walkers.variantutils.VariantsToTable.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.readutils.ClipReads.help.summary=Read clipping based on quality, position or sequence matching
org.broadinstitute.gatk.tools.walkers.rnaseq.ASEReadCounter.OUTPUT_FORMAT.help.description=
org.broadinstitute.gatk.tools.walkers.qc.CountLoci.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.FlagStat.FlagStatus.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.TandemRepeat.help.summary=Stratifies the eval RODs into sites that are tandem repeats
org.broadinstitute.gatk.tools.walkers.coverage.GCContentByInterval.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantutils.VariantsToTable.Getter.help.summary=
org.broadinstitute.gatk.tools.walkers.variantutils.CombineVariants.help.description=Combine variant records from different sources  <p>CombineVariants reads in variants records from separate ROD (Reference-Ordered Data) sources and combines them into a single VCF. Any number of sources can be input. This tool aims to fulfill two main possible use cases, reflected by the two combination options (MERGE and UNION), for merging records at the variant level (the first 8 fields of the VCF) or at the genotype level (the rest).</p>  <ul> <li><b>MERGE\:</b> combines multiple variant records present at the same site in the different input sources into a single variant record in the output. If sample names overlap, then they are "uniquified" by default, which means a suffix is appended to make them unique. <em>Note that in version 3.3, the automatic uniquifying was disabled (unintentionally), and required setting `-genotypeMergeOptions UNIQUIFY` manually.</em></li>  <li><b>UNION\:</b> assumes that each ROD source represents the same set of samples (although this is not enforced). It uses the priority list (if provided) to emit a single record instance at every position represented in the input RODs.</li> </ul>  <p>By default, the input sets will be named variants, variants2, variants3, and so on. You can override this by providing an explicit name tag for each input, using the syntax " -V\:format,name". Each input tagged in this way will be labeled as such in the output (i.e., set\=name rather than set\=variants2). For example, you could specify a set of control samples as " -V\:vcf,control my_control_samples.vcf", and the resulting VCF records would contain the annotation "set\=control" in the INFO field. It is strongly recommended to provide explicit names in this way when a rod priority list is provided.</p>  <p>CombineVariants will emit a record for every site that was present in any of your input VCF files, and will annotate (in the set attribute in the INFO field) whether the record had a PASS or FILTER status in each input ROD . In effect, CombineVariants always produces a union of the input VCFs.  However, any part of the Venn of the merged VCFs can be extracted using JEXL expressions on the set attribute using SelectVariants.  If you want to extract just the records in common between two VCFs, you would first run CombineVariants on the two files to generate a single VCF and then run SelectVariants to extract the common records with `-select 'set \=\= "Intersection"'`, as worked out in the detailed example in the documentation guide.</p>  <h3>Input</h3> <p> Two or more variant sets to combine. </p>  <h3>Output</h3> <p> A combined VCF. </p>  <h3>Usage examples</h3> &nbsp; <h4>Merge two separate callsets</h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T CombineVariants \\ -R reference.fasta \\ --variant input1.vcf \\ --variant input2.vcf \\ -o output.vcf \\ -genotypeMergeOptions UNIQUIFY </pre>  <h4>Get the union of calls made on the same samples </h4> <pre> java -jar GenomeAnalysisTK.jar \\ -T CombineVariants \\ -R reference.fasta \\ --variant\:foo input1.vcf \\ --variant\:bar input2.vcf \\ -o output.vcf \\ -genotypeMergeOptions PRIORITIZE \\ -priority foo,bar </pre>  <h3>Caveats</h3> <ul> <li>This tool is not intended to manipulate GVCFS\! To combine GVCF files output by HaplotypeCaller, use CombineGVCFs.</li> <li>To join intermediate VCFs produced by running jobs in parallel by interval (e.g. by chromosome), use CatVariants.</li> </ul>  <h3>Additional notes</h3> <ul> <li> Using this tool's multi-threaded parallelism capability is particularly useful when converting from VCF to BCF2, which can be time-consuming. In this case each thread spends CPU time doing the conversion, and the GATK engine is smart enough to merge the partial BCF2 blocks together efficiently.  However, since this merge runs in only one thread, you can quickly reach diminishing returns with the number of parallel threads.  In our hands, `-nt 4` works well but `-nt 8` tends to be be too much.</li> <li>Since GATK 2.1, when merging multiple VCF records at a site, the combined VCF record has the QUAL of the first VCF record with a non-MISSING QUAL value.  The previous behavior was to take the max QUAL, which could result in strange downstream confusion</li> </ul>
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Degeneracy.help.summary=Experimental stratification by the degeneracy of an amino acid, according to VCF annotation.
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Filter.help.summary=Stratifies by the FILTER status (PASS, FAIL) of the eval records
org.broadinstitute.gatk.tools.walkers.annotator.BaseCounts.help.summary=Count of A, C, G, T bases across all samples
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.VariantStratifier.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.VariantAnnotatorEngine.VAExpression.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.JexlExpression.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.AnnotationType.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.help.summary=
org.broadinstitute.gatk.tools.walkers.diffengine.DiffObjects.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.fasta.FastaStats.help.description=Calculate basic statistics about the reference sequence itself  <p>These are very basic statistics\: total number of bases and number of "regular" bases (i.e. A, C, T or G).</p>  <h3>Input</h3> <p> A FASTA reference file. </p>  <h3>Output</h3> <p> Base counts are written to file if an output file name is given (with -o), otherwise output to stdout. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T FastaStats \\ -R reference.fasta \\ [-o output.txt] </pre>
org.broadinstitute.gatk.tools.walkers.variantrecalibration.VQSRCalibrationCurve.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.readutils.PrintReads.help.description=Write out sequence read data (for filtering, merging, subsetting etc)  <p> PrintReads is a generic utility tool for manipulating sequencing data in SAM/BAM format. It can dynamically merge the contents of multiple input BAM files, resulting in merged output sorted in coordinate order. It can also optionally filter reads based on various read properties such as read group tags using the `--read_filter/-rf` command line argument (see documentation on read filters for more information). </p>  <p> Note that when PrintReads is used as part of the Base Quality Score Recalibration workflow, it takes the `--BQSR` engine argument, which is listed under Inherited Arguments > CommandLineGATK below. </p>  <h3>Input</h3> <p> One or more bam files. </p>  <h3>Output</h3> <p> A single processed bam file. </p>  <h3>Usage examples</h3> <pre> // Prints all reads that have a mapping quality above zero java -jar GenomeAnalysisTK.jar \\ -T PrintReads \\ -R reference.fasta \\ -I input1.bam \\ -I input2.bam \\ -o output.bam \\ --read_filter MappingQualityZero  // Prints the first 2000 reads in the BAM file java -jar GenomeAnalysisTK.jar \\ -T PrintReads \\ -R reference.fasta \\ -I input.bam \\ -o output.bam \\ -n 2000  // Downsamples BAM file to 25% java -jar GenomeAnalysisTK.jar \\ -T PrintReads \\ -R reference.fasta \\ -I input.bam \\ -o output.bam \\ -dfrac 0.25 </pre>
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.CompRod.help.description=Required stratification grouping output by each comp ROD
org.broadinstitute.gatk.tools.walkers.haplotypecaller.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.StandardUGAnnotation.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.DynamicStratification.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.CallableLoci.CalledState.help.description=
org.broadinstitute.gatk.tools.help.description=
org.broadinstitute.gatk.tools.walkers.help.WalkerDocumentationHandler.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.TiTvVariantEvaluator.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.StandardSomaticAnnotation.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.CallableLoci.Integrator.help.description=
org.broadinstitute.gatk.tools.walkers.qc.ReadClippingStats.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.FlagStat.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.diffengine.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.TandemRepeat.help.description=Stratifies the eval RODs into sites that are tandem repeats
org.broadinstitute.gatk.tools.walkers.coverage.DoCOutputType.help.description=Models a single output file in the DoC walker.
org.broadinstitute.gatk.tools.walkers.qc.CountBases.help.description=Count the number of bases in a set of reads  <h3>Input</h3> <p> One or more BAM files. </p>  <h3>Output</h3> <p> Number of bases seen. If an output file name is provided, then the result will be written to that file. Otherwise it will be sent to standard console output. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -R reference.fasta \\ -T CountBases \\ -I input.bam \\ [-L input.intervals] </pre>
org.broadinstitute.gatk.tools.walkers.examples.GATKDocsExample.help.description=[Short one sentence description of this walker]  <p> [Functionality of this walker] </p>  <h3>Input</h3> <p> [Input description] </p>  <h3>Output</h3> <p> [Output description] </p>  <h3>Examples</h3> <pre> java -jar GenomeAnalysisTK.jar -T $WalkerName </pre>
org.broadinstitute.gatk.tools.walkers.variantutils.VariantsToTable.help.description=Extract specific fields from a VCF file to a tab-delimited table  <p> This tool is designed to extract fields from the VCF to a table format that is more convenient to work with in downstream analyses.</p>  <p>The user specifies one or more fields to print with the -F NAME, each of which appears as a single column in the output file, with a header named NAME, and the value of this field in the VCF one per line.  NAME can be any standard VCF column (CHROM, ID, QUAL) or any binding in the INFO field (AC\=10).  In addition, there are specially supported values like EVENTLENGTH (length of the event), TRANSITION (for SNPs), HET (count of het genotypes), HOM-REF (count of homozygous reference genotypes), HOM-VAR (count of homozygous variant genotypes), NO-CALL (count of no-call genotypes), TYPE (the type of event), VAR (count of non-reference genotypes), NSAMPLES (number of samples), NCALLED (number of called samples), GQ (from the genotype field; works only for a file with a single sample), and MULTI-ALLELIC (is the record from a multi-allelic site).  </p>  </p>  <h3>Input</h3> <p> <ul> <li>A VCF file</li> <li>A list of -F fields to write</li> </ul> </p>  <h3>Output</h3> <p> A tab-delimited file containing the values of the requested fields in the VCF file </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -R reference.fasta -T VariantsToTable \\ -V file.vcf \\ -F CHROM -F POS -F ID -F QUAL -F AC \\ -o results.table </pre> <p>would produce a file that looks like\:</p> <pre> CHROM    POS ID      QUAL    AC 1        10  .       50      1 1        20  rs10    99      10 et cetera... </pre>  <h3>Caveat</h3> <p>If a VCF record is missing a value, then the tool by default throws an error, but the special value NA can be emitted instead if requested at the command line using --allowMissingData.</p>
org.broadinstitute.gatk.tools.walkers.fasta.FastaAlternateReferenceMaker.help.summary=Generate an alternative reference sequence over the specified interval
org.broadinstitute.gatk.tools.walkers.readutils.ClipReads.ClippingData.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.SnpEffPositionModifier.help.summary=Stratifies variants as genes or coding regions, according to the effect modifier, as indicated by snpEff.
org.broadinstitute.gatk.tools.walkers.qc.CountReadEvents.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.util.EvaluationContext.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.AnnotationHelpUtils.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.LowMQ.help.description=Proportion of low quality reads  <p>This annotation tells you what fraction of reads have a mapping quality of less than the given threshold of 10 (including 0). Note that certain tools may impose a different minimum mapping quality threshold. For example, HaplotypeCaller excludes reads with MAPQ<20.</p>  <h3>Calculation</h3> $$ LowMQ \= \\frac{\# reads with MAPQ\=0 + \# reads with MAPQ<10}{total \# reads} $$  <h3>Related annotations</h3> <ul> <li><b><a href\="https\://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_annotator_MappingQualityZero.php">MappingQualityZero</a></b> gives the count of reads with MAPQ\=0 across all samples.</li> <li><b><a href\="https\://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_annotator_MappingQualityZeroBySample.php">MappingQualityZeroBySample</a></b> gives the count of reads with MAPQ\=0 for each individual sample.</li> </ul>
org.broadinstitute.gatk.tools.walkers.qc.DocumentationTest.help.description=Summary test  <p>Body test</p>
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.DynamicStratification.help.description=Tag this stratification as dynamically determining the final strat based on the input data  The paradigm here is simple.  We upfront create a strat with N states that reflect the finest grained possible division of the data.  The data is processed, and statistics collected for each of the N states. An update call is made to the stratification for evaluation VariantContext during each map call, allowing the strat to collect data about the usage of each state.  A final call requests that the stratification map down the N states into M states (typically less than N, not necessarily a subset of N).  This is provided by returning a map from each of M state -> N states and the VariantEval walker will combine all of the evaluations for N into a single value for each M.  For example, suppose I have a dynamic strat called AC, adopting 7 possible values 0,1,2,3,4,5,6.  This strats tracks the number of eval vcs for each state, with final counts 0\=1, 1\=100, 2\=10, 3\=5, 4\=3, 5\=2, 6\=1. The stratification attempts to combine the strats down to so that each state has approximately the same fraction of the data in each bin.  Overall there is 1+100+10+5+3+2+1\=124 observations and 7 bins so we really want ~ 18 observations in each bin.  So we merge 3-6 with 5+3+2+1 \= 11 and keep 2, 1, and 0 as distinct bins.  We return a map from 0 -> 0, 1 -> 1, 2 -> 2, 3-6 -> {3,4,5,6}.  TODO - some open implementation questions -- We should only create one stratifier overall.  How do we track this?  When we create the stratifiers perhaps we can look at them and create a tracker? -- How do we create a new stratifier based on the finalStratifications() given the framework?  Conceptually this new thing is itself a stratifier, just like before, but it's states are determined at the end.  We'd then like to call not getRelevantStates but a different function that accepts an old state and returns the new state.  Perhaps the process should look like\: finalizeStratification -> new Stratifier whose states are the final ones getNewState(old state) -> new state (one of those in getFinalStratification)
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.VariantEvaluator.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.VariantAnnotatorEngine.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.OneBPIndel.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.DoCOutputType.Aggregation.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.CountReads.help.summary=Count the number of reads
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.EffectCoding.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.diffengine.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.AlleleFrequency.help.description=Stratifies the eval RODs by the allele frequency of the alternate allele  Uses a constant 0.005 frequency grid, and projects the AF INFO field value.  Requires that AF be present in every ROD, otherwise this stratification throws an exception
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.AnnotationHelpUtils.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.MultiallelicSummary.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.VariantEval.help.description=General-purpose tool for variant evaluation (% in dbSNP, genotype concordance, Ti/Tv ratios, and a lot more)  <p> Given a variant callset, it is common to calculate various quality control metrics. These metrics include the number of raw or filtered SNP counts; ratio of transition mutations to transversions; concordance of a particular sample's calls to a genotyping chip; number of singletons per sample; etc. Furthermore, it is often useful to stratify these metrics by various criteria like functional class (missense, nonsense, silent), whether the site is CpG site, the amino acid degeneracy of the site, etc. VariantEval facilitates these calculations in two ways\: by providing several built-in evaluation and stratification modules, and by providing a framework that permits the easy development of new evaluation and stratification modules. </p>  <h3>Input</h3> <p> One or more variant sets to evaluate plus any number of comparison sets. </p>  <h3>Output</h3> <p> Evaluation tables detailing the results of the eval modules which were applied. For example\: </p> <pre> output.eval.grp\: \#\#\:GATKReport.v0.1 CountVariants \: Counts different classes of variants in the sample CountVariants  CompRod   CpG      EvalRod  JexlExpression  Novelty  nProcessedLoci  nCalledLoci  nRefLoci  nVariantLoci  variantRate ... CountVariants  dbsnp     CpG      eval     none            all      65900028        135770       0         135770        0.00206024  ... CountVariants  dbsnp     CpG      eval     none            known    65900028        47068        0         47068         0.00071423  ... CountVariants  dbsnp     CpG      eval     none            novel    65900028        88702        0         88702         0.00134601  ... CountVariants  dbsnp     all      eval     none            all      65900028        330818       0         330818        0.00502000  ... CountVariants  dbsnp     all      eval     none            known    65900028        120685       0         120685        0.00183133  ... CountVariants  dbsnp     all      eval     none            novel    65900028        210133       0         210133        0.00318866  ... CountVariants  dbsnp     non_CpG  eval     none            all      65900028        195048       0         195048        0.00295976  ... CountVariants  dbsnp     non_CpG  eval     none            known    65900028        73617        0         73617         0.00111710  ... CountVariants  dbsnp     non_CpG  eval     none            novel    65900028        121431       0         121431        0.00184265  ... ... </pre> </p>  <h3>Usage examples</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T VariantEval \\ -R reference.fasta \\ -o output.eval.grp \\ --eval\:set1 set1.vcf \\ --eval\:set2 set2.vcf \\ [--comp comp.vcf] </pre>  Count Mendelian violations for each family in a callset with multiple families (and provided pedigree) <pre> Java -jar GenomeAnalysisTK.jar \\ -T VariantEval \\ -R reference.fasta \\ -o output.MVs.byFamily.table \\ --eval multiFamilyCallset.vcf \\ -noEV -noST \\ -ST Family \\ -EV MendelianViolationEvaluator </pre>  <h3>Caveat</h3>  <p>Some stratifications and evaluators are incompatible with each other due to their respective memory requirements, such as AlleleCount and VariantSummary, or Sample and VariantSummary. If you specify such a combination, the program will output an error message and ask you to disable one of these options. We do not currently provide an exhaustive list of incompatible combinations, so we recommend trying out combinations that you are interested in on a dummy command line, to rapidly ascertain whether it will work or not.</p>
org.broadinstitute.gatk.tools.walkers.qc.CountIntervals.help.description=Count contiguous regions in an interval list  <p>When the GATK reads in intervals from an intervals list, any intervals that overlap each other get merged into a single interval spanning the original ones. For example, if you have the following intervals\: <ul><li> 20\:1-2000 </li><li> 20\:1500-3000 </li></ul> They will be merged into a single interval\: <ul><li>20\:1-3000</li></ul>  This tool allows you to check, for a given list of intervals, how many separate intervals the GATK will actually distinguish at runtime. </p>  <h3>Input</h3> <p> One or more ROD files containing intervals to check. </p>  <h3>Output</h3> <p> Number of separate intervals identified by GATK after merging overlapping intervals. </p>  You can use the -numOverlaps argument to find out how many cases you have of a specific number of overlaps.  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T CountIntervals \\ -R reference.fasta \\ -o output.txt \\ -check intervals.list </pre>
org.broadinstitute.gatk.tools.walkers.qc.CountTerminusEvent.help.summary=Count the number of reads ending in insertions, deletions or soft-clips
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.EffectType.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.CompRod.help.summary=Required stratification grouping output by each comp ROD
org.broadinstitute.gatk.tools.walkers.readutils.ClipReads.ReadClipperWithData.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.help.description=
org.broadinstitute.gatk.tools.walkers.qc.CountBases.help.summary=Count the number of bases in a set of reads
org.broadinstitute.gatk.tools.walkers.qc.RodSystemValidation.help.summary=a walker for validating (in the style of validating pile-up) the ROD system.
org.broadinstitute.gatk.tools.walkers.coverage.CallableLoci.help.summary=Collect statistics on callable, uncallable, poorly mapped, and other parts of the genome
org.broadinstitute.gatk.tools.walkers.coverage.DepthOfCoverage.help.summary=Assess sequence coverage by a wide array of metrics, partitioned by sample, read group, or library
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Contig.help.summary=Stratifies the evaluation by each contig in the reference sequence
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.VariantSummary.Type.help.description=
org.broadinstitute.gatk.tools.walkers.coverage.DoCOutputType.Aggregation.help.summary=
org.broadinstitute.gatk.tools.walkers.variantutils.VariantsToBinaryPed.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.StandardAnnotation.help.description=
org.broadinstitute.gatk.tools.walkers.variantutils.CombineVariants.help.summary=Combine variant records from different sources
org.broadinstitute.gatk.tools.walkers.annotator.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Novelty.help.summary=Stratifies by whether a site in in the list of known RODs (e.g., dbsnp by default)
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.StandardSomaticAnnotation.help.description=
org.broadinstitute.gatk.tools.walkers.variantutils.VariantsToVCF.help.description=Convert variants from other file formats to VCF format  <p> Note that there must be a Tribble feature/codec available for the file format as well as an adaptor. </p>  <h3>Input</h3> <p> A variant file to convert. </p>  <h3>Output</h3> <p> A VCF file. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T VariantsToVCF \\ -R reference.fasta \\ -o output.vcf \\ --variant\:RawHapMap input.hapmap </pre>
org.broadinstitute.gatk.tools.walkers.variantutils.SelectVariants.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.filters.help.description=
org.broadinstitute.gatk.tools.walkers.filters.FiltrationContextWindow.help.description=A window of variants surrounding the current variant being investigated
org.broadinstitute.gatk.tools.walkers.variantutils.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.DepthOfCoverageStats.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantrecalibration.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.SnpEffPositionModifier.PositionModifier.help.description=
org.broadinstitute.gatk.tools.walkers.filters.VariantFiltration.help.summary=Filter variant calls based on INFO and FORMAT annotations
org.broadinstitute.gatk.tools.walkers.annotator.AlleleBalance.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.IntervalStratification.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.StandardUGAnnotation.help.description=
org.broadinstitute.gatk.tools.walkers.qc.CountLoci.help.summary=Count the total number of covered loci
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.ActiveRegionBasedAnnotation.help.summary=
org.broadinstitute.gatk.tools.walkers.coverage.DoCOutputType.Aggregation.help.description=
org.broadinstitute.gatk.tools.walkers.qc.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.help.description=
org.broadinstitute.gatk.tools.walkers.variantutils.GenotypeConcordance.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.AnnotationInterfaceManager.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.VariantAnnotatorAnnotation.help.summary=
org.broadinstitute.gatk.tools.walkers.qc.CountRODs.help.description=Count the number of ROD objects encountered  <p>CountRods is a RODWalker, and so traverses the data by ROD (reference ordered data). For example if the ROD passed to it is a VCF file, it will count the variants in the file.</p>  <p>Note that this tool is different from CountRodsByRef which is a RefWalker, and so traverses the data by position along the reference. CountRodsByRef can count ROD elements (such as, but not limited to, variants) found at each position or within specific intervals if you use the -L argument (see CommandLineGATK).</p>  <p>Both these tools are different from CountVariants in that they are more generic (they can also count RODs that are not variants) and CountVariants is more detailed, in that it computes additional statistics (type of variants being indels vs. SNPs etc). </p>  <h3>Input</h3> <p> One or more ROD files. </p>  <h3>Output</h3> <p> Number of RODs seen. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T CountRODs \\ -R reference.fasta \\ -o output.txt \\ --rod input.vcf </pre>
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.IndelSize.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.AlleleBalance.help.description=Allele balance across all samples  <p> This is an experimental annotation that attempts to estimate whether the data supporting a variant call fits allelic ratio expectations, or whether there might be some bias in the data. Each sample will contribute its allelic read depth (from the AD annotation) to either ABHom or ABHet depending on its genotype call\: ABHom if the call is homozygous (REF/REF or ALT/ALT), and ABHet if the call is heterozygous (REF/ALT). Additionally, reads that support something other than the genotyped alleles (called "non-alleles") will be counted in the OND tag, which represents the overall fraction of data that diverges from the diploid hypothesis.</p> <h3>Calculations</h3> <p> $$ ABHom \= \\frac{\# ALT alleles}{total \# alleles} $$ <br /> $$ ABHet \= \\frac{\# REF alleles}{\# total alleles} $$ <br /> $$ OND \= \\frac{\# genotyped alleles}{\# alleles + \# non-alleles} $$ </p> <p> For ABHom, the value should be close to 1.00 because ideally, all the reads should support a single allele. For ABHet, the value should be close to 0.5, so half of the alleles support the ref allele and half of the alleles support the alt allele. Divergence from these expected ratios may indicate that there is some bias in favor of one allele. Note the caveats below regarding cancer and RNAseq analysis. </p> <h3>Caveats</h3> <ul> <li>This annotation will only work properly for biallelic variants where all samples are called heterozygous or homozygous.</li> <li>This annotation cannot currently be calculated for indels.</li> <li>tThe reasoning underlying this annotation only applies to germline variants in DNA sequencing data. In somatic/cancer analysis, divergent ratios are expected due to tumor heterogeneity. In RNAseq analysis, divergent ratios may indicate differential allele expression.</li> <li>As stated above, this annotation is experimental and should be interpreted with caution as we cannot guarantee that it is appropriate. Basically, use it at your own risk.</li> </ul> <h3>Related annotations</h3> <ul> <li><b><a href\="https\://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_annotator_AlleleBalanceBySample.php">AlleleBallanceBySample</a></b> calculates allele balance for each individual sample.</li> <li><b><a href\="https\://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_annotator_DepthPerAlleleBySample.php">DepthPerAlleleBySample</a></b> calculates depth of coverage for each allele per sample.</li> </ul>
org.broadinstitute.gatk.tools.walkers.variantutils.ValidateVariants.ValidationType.help.summary=
org.broadinstitute.gatk.tools.walkers.qc.PrintRODs.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.rnaseq.ASEReadCounter.OUTPUT_FORMAT.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.VariantEval.help.summary=General-purpose tool for variant evaluation (% in dbSNP, genotype concordance, Ti/Tv ratios, and a lot more)
org.broadinstitute.gatk.tools.walkers.haplotypecaller.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.ExperimentalAnnotation.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.ActiveRegionBasedAnnotation.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.SnpEffPositionModifier.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.MultiallelicSummary.help.description=
org.broadinstitute.gatk.tools.walkers.variantutils.ConcordanceMetrics.help.description=A class for tabulating and evaluating a callset-by-callset genotype concordance table
org.broadinstitute.gatk.tools.walkers.fasta.FastaStats.help.summary=Calculate basic statistics about the reference sequence itself
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.EffectImpact.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.DynamicStratification.help.summary=Tag this stratification as dynamically determining the final strat based on the input data  The paradigm here is simple.
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.CountVariants.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.help.summary=Top effect from SnpEff functional predictions
org.broadinstitute.gatk.tools.walkers.coverage.CoverageUtils.CountPileupType.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.util.VariantEvalUtils.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.haplotypecaller.HCMappingQualityFilter.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.help.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantrecalibration.help.description=
org.broadinstitute.gatk.tools.walkers.diagnostics.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.CoverageUtils.help.summary=IF THERE IS NO JAVADOC RIGHT HERE, YELL AT chartl
org.broadinstitute.gatk.tools.walkers.qc.CountMales.help.summary=Count the number of reads seen from male samples
org.broadinstitute.gatk.tools.walkers.filters.help.summary=
org.broadinstitute.gatk.tools.walkers.examples.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.rnaseq.ASEReadCounter.help.summary=Calculate read counts per allele for allele-specific expression analysis
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.VariantAnnotatorAnnotation.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantutils.CombineVariants.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.TiTvVariantEvaluator.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.StandardStratification.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.AnnotatorCompatible.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.manager.Stratifier.help.summary=A basic interface for a class to be used with the StratificationManager system
org.broadinstitute.gatk.tools.walkers.qc.CountReadEvents.help.summary=Count the number of read events
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.TandemRepeat.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.AnnotatorCompatible.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.manager.StratificationManager.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Degeneracy.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.TiTvVariantEvaluator.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.help.description=Top effect from SnpEff functional predictions  <p>This annotation processes the output of the SnpEff functional prediction tool to select only the predicted effect with the highest biological impact. The SnpEff output must be provided on the command line by specifying "--snpEffFile filename.vcf". See <a href\="http\://snpeff.sourceforge.net/">http\://snpeff.sourceforge.net/</a> for more information about the SnpEff tool.</p>  <h3>Caveat</h3>  <ul><li>This annotation currently only supports output from SnpEff version 2.0.5.</li></ul>
org.broadinstitute.gatk.tools.walkers.fasta.FastaStats.FastaStatistics.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Sample.help.summary=Stratifies the eval RODs by each sample in the eval ROD.
org.broadinstitute.gatk.tools.walkers.annotator.AlleleSpecificAnnotationData.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.diagnostics.ReadGroupProperties.help.description=Collect statistics about read groups and their properties  <p>This tool emits a GATKReport containing read group, sample, library, platform, center, sequencing data, paired end status, simple read type name (e.g. 2x76) median insert size and median read length for each read group in every provided BAM file.</p>  <p>Note that this walker stops when all read groups have been observed at least a few thousand times so that the median statistics are well determined.  It is safe to run it on whole genome sequence data and expect it to finish in an appropriate timeframe.</p>  <h3>Input</h3> <p> Any number of BAM files </p>  <h3>Output</h3> <p> GATKReport containing read group, sample, library, platform, center, median insert size and median read length.  For example, running this tool on the NA12878 data sets\:  <pre> \#\#\:GATKReport.v0.2 ReadGroupProperties \: Table of read group properties readgroup  sample   library       platform  center  date     has.any.reads  is.paired.end  n.reads.analyzed  simple.read.type  median.read.length  median.insert.size 20FUK.1    NA12878  Solexa-18483  illumina  BI      2/2/10   true           true                        498  2x101                            101                 386 20FUK.2    NA12878  Solexa-18484  illumina  BI      2/2/10   true           true                        476  2x101                            101                 417 20FUK.3    NA12878  Solexa-18483  illumina  BI      2/2/10   true           true                        407  2x101                            101                 387 20FUK.4    NA12878  Solexa-18484  illumina  BI      2/2/10   true           true                        389  2x101                            101                 415 20FUK.5    NA12878  Solexa-18483  illumina  BI      2/2/10   true           true                        433  2x101                            101                 386 20FUK.6    NA12878  Solexa-18484  illumina  BI      2/2/10   true           true                        480  2x101                            101                 418 20FUK.7    NA12878  Solexa-18483  illumina  BI      2/2/10   true           true                        450  2x101                            101                 386 20FUK.8    NA12878  Solexa-18484  illumina  BI      2/2/10   true           true                        438  2x101                            101                 418 20GAV.1    NA12878  Solexa-18483  illumina  BI      1/26/10  true           true                        490  2x101                            101                 391 20GAV.2    NA12878  Solexa-18484  illumina  BI      1/26/10  true           true                        485  2x101                            101                 417 20GAV.3    NA12878  Solexa-18483  illumina  BI      1/26/10  true           true                        460  2x101                            101                 392 20GAV.4    NA12878  Solexa-18484  illumina  BI      1/26/10  true           true                        434  2x101                            101                 415 20GAV.5    NA12878  Solexa-18483  illumina  BI      1/26/10  true           true                        479  2x101                            101                 389 20GAV.6    NA12878  Solexa-18484  illumina  BI      1/26/10  true           true                        461  2x101                            101                 416 20GAV.7    NA12878  Solexa-18483  illumina  BI      1/26/10  true           true                        509  2x101                            101                 386 20GAV.8    NA12878  Solexa-18484  illumina  BI      1/26/10  true           true                        476  2x101                            101                 410                           101                 414 </pre> </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T ReadGroupProperties \\ -R reference.fasta \\ -I example1.bam \\ -I example2.bam \\ -o readgroup_report.grp </pre>
org.broadinstitute.gatk.tools.walkers.qc.CountRODs.Datum.help.summary=
org.broadinstitute.gatk.tools.walkers.diagnostics.ReadGroupProperties.help.summary=Collect statistics about read groups and their properties
org.broadinstitute.gatk.tools.walkers.varianteval.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.help.WalkerDocumentationHandler.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.AlleleBalanceBySample.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.StandardEval.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.manager.help.summary=
org.broadinstitute.gatk.tools.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantutils.VariantsToVCF.help.summary=Convert variants from other file formats to VCF format
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.OneBPIndel.help.summary=Stratifies the eval RODs into sites where the indel is 1 bp in length and those where the event is 2+.
org.broadinstitute.gatk.tools.walkers.annotator.NBaseCount.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.readutils.ClipReads.help.description=Read clipping based on quality, position or sequence matching  <p>This tool provides simple, powerful read clipping capabilities that allow you to remove low quality strings of bases, sections of reads, and reads containing user-provided sequences.</p>  <p>There are three options for clipping (quality, position and sequence), which can be used alone or in combination. In addition, you can also specify a clipping representation, which determines exactly how ClipReads applies clips to the reads (soft clips, writing Q0 base quality scores, etc.). Please note that you MUST specify at least one of the three clipping options, and specifying a clipping representation is not sufficient. If you do not specify a clipping option, the program will run but it will not do anything to your reads.</p>  <dl> <dt>Quality score based clipping</dt> <dd> Clip bases from the read in clipper from <pre>argmax_x{ \\sum{i \= x + 1}^l (qTrimmingThreshold - qual)</pre> to the end of the read.  This is copied from BWA.  Walk through the read from the end (in machine cycle order) to the beginning, calculating the running sum of qTrimmingThreshold - qual.  While we do this, we track the maximum value of this sum where the delta > 0.  After the loop, clipPoint is either -1 (don't do anything) or the clipping index in the read (from the end). </dd><br /> <dt>Cycle based clipping</dt> <dd>Clips machine cycles from the read. Accepts a string of ranges of the form start1-end1,start2-end2, etc. For each start/end pair, removes bases in machine cycles from start to end, inclusive. These are 1-based values (positions). For example, 1-5,10-12 clips the first 5 bases, and then three bases at cycles 10, 11, and 12. </dd><br /> <dt>Sequence matching</dt> <dd>Clips bases from that exactly match one of a number of base sequences. This employs an exact match algorithm, filtering only bases whose sequence exactly matches SEQ.</dd> </dl>   <h3>Input</h3> <p> Any number of BAM files. </p>  <h3>Output</h3> <p> A new BAM file containing all of the reads from the input BAMs with the user-specified clipping operation applied to each read. </p> <p> <h4>Summary output (console)</h4> <pre> Number of examined reads              13 Number of clipped reads               13 Percent of clipped reads              100.00 Number of examined bases              988 Number of clipped bases               126 Percent of clipped bases              12.75 Number of quality-score clipped bases 126 Number of range clipped bases         0 Number of sequence clipped bases      0 </pre> </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T ClipReads \\ -R reference.fasta \\ -I original.bam \\ -o clipped.bam \\ -XF seqsToClip.fasta \\ -X CCCCC \\ -CT "1-5,11-15" \\ -QT 10 </pre> <p>The command line shown above will apply all three options in combination. See the detailed examples below to see how the choice of clipping representation affects the output.</p>  <h4>Detailed clipping examples</h4> <p>Suppose we are given this read\:</p> <pre> 314KGAAXX090507\:1\:19\:1420\:1123\#0        16      chrM    3116    29      76M     *       *       * TAGGACCCGGGCCCCCCTCCCCAATCCTCCAACGCATATAGCGGCCGCGCCTTCCCCCGTAAATGATATCATCTCA \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#4?6/?2135;;;'1/\=/<'B9;12;68?A79@,@\=\=@9?\=AAA3;A@B;A?B54;?ABA </pre>  <p>If we are clipping reads with -QT 10 and -CR WRITE_NS, we get\:</p>  <pre> 314KGAAXX090507\:1\:19\:1420\:1123\#0        16      chrM    3116    29      76M     *       *       * NNNNNNNNNNNNNNNNNTCCCCAATCCTCCAACGCATATAGCGGCCGCGCCTTCCCCCGTAAATGATATCATCTCA \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#4?6/?2135;;;'1/\=/<'B9;12;68?A79@,@\=\=@9?\=AAA3;A@B;A?B54;?ABA </pre>  <p>Whereas with -QT 10 -CR WRITE_Q0S\:</p> <pre> 314KGAAXX090507\:1\:19\:1420\:1123\#0        16      chrM    3116    29      76M     *       *       * TAGGACCCGGGCCCCCCTCCCCAATCCTCCAACGCATATAGCGGCCGCGCCTTCCCCCGTAAATGATATCATCTCA \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!4?6/?2135;;;'1/\=/<'B9;12;68?A79@,@\=\=@9?\=AAA3;A@B;A?B54;?ABA </pre>  <p>Or -QT 10 -CR SOFTCLIP_BASES\:</p> <pre> 314KGAAXX090507\:1\:19\:1420\:1123\#0        16      chrM    3133    29      17S59M  *       *       * TAGGACCCGGGCCCCCCTCCCCAATCCTCCAACGCATATAGCGGCCGCGCCTTCCCCCGTAAATGATATCATCTCA \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#4?6/?2135;;;'1/\=/<'B9;12;68?A79@,@\=\=@9?\=AAA3;A@B;A?B54;?ABA </pre>
org.broadinstitute.gatk.tools.walkers.annotator.MappingQualityZeroBySample.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.EvalRod.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.filters.FiltrationContextWindow.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.CountVariants.help.summary=
org.broadinstitute.gatk.tools.walkers.examples.GATKPaperGenotyper.help.summary=A simple Bayesian genotyper, that outputs a text based call format.
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.EvalRod.help.summary=Required stratification grouping output by each eval ROD
org.broadinstitute.gatk.tools.walkers.qc.CountRODs.help.summary=Count the number of ROD objects encountered
org.broadinstitute.gatk.tools.walkers.diagnostics.ReadLengthDistribution.help.summary=Collect read length statistics
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Family.help.description=Stratifies the eval RODs by each family in the eval ROD, as described by the pedigree.  This allows the system to analyze each family separately.  This is particularly useful for the MendelianViolationEvaluator module.
org.broadinstitute.gatk.tools.walkers.coverage.DoCOutputType.Partition.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.RodRequiringAnnotation.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.ReducibleAnnotation.help.summary=An interface for annotations that are calculated using raw data across samples, rather than the median (or median of median) of samples values
org.broadinstitute.gatk.tools.walkers.filters.FiltrationContext.help.summary=
org.broadinstitute.gatk.tools.walkers.haplotypecaller.HCMappingQualityFilter.help.summary=Filter out reads with low mapping qualities for HaplotypeCaller
org.broadinstitute.gatk.tools.walkers.qc.Pileup.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.CompressedDataList.help.summary=A class to represent data as a list of <value,count> pairs.
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.SnpEffPositionModifier.PositionModifier.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.AlleleFrequency.help.summary=Stratifies the eval RODs by the allele frequency of the alternate allele  Uses a constant 0.005 frequency grid, and projects the AF INFO field value.
org.broadinstitute.gatk.tools.walkers.diagnostics.ErrorRatePerCycle.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.MappingQualityZeroBySample.help.summary=Count of reads with mapping quality zero for each sample
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.CpG.help.description=CpG is a stratification module for VariantEval that divides the input data by within/not within a CpG site  <p> It is a three-state stratification\: <ul> <li>The locus is a CpG site ("CpG") <li>The locus is not a CpG site ("non_CpG") <li>The locus is either a CpG or not a CpG site ("all") </ul> A CpG site is defined as a site where the reference base at a locus is a C and the adjacent reference base in the 3' direction is a G.
org.broadinstitute.gatk.tools.walkers.qc.CountBases.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.CompareCallableLoci.help.description=Compare callability statistics  <p>This tool can be used to evaluate how different sequence datasets compare in terms of "callability" based on the output of the CallableLoci tool. </p>   <h3>Input</h3> <p> Two files to compare, output by two runs of CallableLoci </p>  <h3>Output</h3> <p> A table showing the callability status of each interval of interest in the two comparison sets and whether they match. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -R reference.fasta \\ -T CompareCallableLoci \\ -comp1 callable_loci_1.bed \\ -comp2 callable_loci_2.bed \\ [-L input.intervals \\] -o comparison.table </pre>
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.VariantEvaluator.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.MendelianViolationEvaluator.help.description=Mendelian violation detection and counting <p/> a violation looks like\: Suppose dad \= A/B and mom \= C/D The child can be [A or B] / [C or D]. If the child doesn't match this, the site is a violation <p/> Some examples\: <p/> mom \= A/A, dad \= C/C child can be A/C only <p/> mom \= A/C, dad \= C/C child can be A/C or C/C <p/> mom \= A/C, dad \= A/C child can be A/A, A/C, C/C <p/> The easiest way to do this calculation is to\: <p/> Get alleles for mom \=> A/B Get alleles for dad \=> C/D Make allowed genotypes for child\: A/C, A/D, B/C, B/D Check that the child is one of these.
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.IndelSummary.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.VariantSummary.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.util.AnalysisModuleScanner.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.AS_StandardAnnotation.help.description=Created by gauthier on 9/28/15.
org.broadinstitute.gatk.tools.walkers.qc.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.MetricsCollection.help.summary=Created by knoblett on 9/15/15.
org.broadinstitute.gatk.tools.walkers.diagnostics.ReadGroupProperties.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.CheckPileup.help.summary=Compare GATK's internal pileup to a reference Samtools pileup
org.broadinstitute.gatk.tools.walkers.annotator.SnpEffUtil.help.summary=Created with IntelliJ IDEA.
org.broadinstitute.gatk.tools.walkers.variantutils.ConcordanceMetrics.help.summary=A class for tabulating and evaluating a callset-by-callset genotype concordance table
org.broadinstitute.gatk.tools.walkers.annotator.VariantOverlapAnnotator.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantutils.VariantsToAllelicPrimitives.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.ErrorThrowing.help.description=A walker that simply throws errors.  Allows us to test that the engine is behaving as expected with error handling
org.broadinstitute.gatk.tools.walkers.readutils.SplitSamFile.help.summary=Split a BAM file by sample
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.EffectImpact.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.ReducibleAnnotationData.help.description=A class to encapsulate the raw data for classes compatible with the ReducibleAnnotation interface
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Family.help.summary=Stratifies the eval RODs by each family in the eval ROD, as described by the pedigree.
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.MultiallelicSummary.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.FractionInformativeReads.help.description=The fraction of reads that were deemed "informative" by the HaplotypeCaller over the entire cohort  <p>The FractionInformativeReads annotation produces a single fraction for each site\: sum(AD)/sum(DP). The sum in the numerator is over all the samples in the cohort and all the alleles in each sample. The sum in the denominator is over all the samples.   <h3>Caveats</h3> <ul> <li>This annotation is generated by HaplotypeCaller or GenotypeGVCFs (it will not work when called from VariantAnnotator).</li> </ul>  <h3>Related annotations</h3> <ul> <li><b><a href\="https\://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_annotator_DepthPerAlleleBySample.php">DepthPerAlleleBySample</a></b> displays the number of reads supporting each allele, without calculating the fraction.</li> </ul>
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.AlleleFrequency.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.IndelLengthHistogram.help.summary=Simple utility for histogramming indel lengths  Based on code from chartl
org.broadinstitute.gatk.tools.walkers.annotator.NBaseCount.help.summary=Percentage of N bases
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.WorkInProgressAnnotation.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.VariantEvalReportWriter.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.QCRef.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.help.description=
org.broadinstitute.gatk.tools.walkers.qc.QCRef.help.summary=Quality control for the reference fasta
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.VariantType.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.StandardStratification.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantutils.RandomlySplitVariants.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.CheckPileup.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.CatVariants.help.description=Concatenate VCF files of non-overlapping genome intervals, all with the same set of samples  <p> The main purpose of this tool is to speed up the gather function when using scatter-gather parallelization. This tool concatenates the scattered output VCF files. It assumes that\: <ul> <li>All the input VCFs (or BCFs) contain the same samples in the same order.</li> <li>The variants in each input file are from non-overlapping (scattered) intervals.</li> </ul> </p> <p>When the input files are already sorted based on the intervals start positions, use -assumeSorted.</p>  <h3>Input</h3> <p> Two or more variant sets to combine. They should be of non-overlapping genome intervals and with the same samples (sorted in the same order). If the files are ordered according to the appearance of intervals in the ref genome, then one can use the -assumeSorted flag. </p>  <h3>Output</h3> <p> A combined VCF or BCF. The output file should have the same extension as the input(s). <\\p>  <h3>Important note</h3> <p>This is a command-line utility that bypasses the GATK engine. As a result, the command-line you must use to invoke it is a little different from other GATK tools (see example below), and it does not accept any of the classic "CommandLineGATK" arguments.</p>  <h3>Usage example</h3> <pre> java -cp GenomeAnalysisTK.jar org.broadinstitute.gatk.tools.CatVariants \\ -R reference.fasta \\ -V input1.vcf \\ -V input2.vcf \\ -out output.vcf \\ -assumeSorted </pre>  <h3>Caveat</h3> <p>Currently the tool is more efficient when working with VCFs than with BCFs.</p>
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Sample.help.description=Stratifies the eval RODs by each sample in the eval ROD.  This allows the system to analyze each sample separately.  Since many evaluations only consider non-reference sites, stratifying by sample results in meaningful calculations for CompOverlap
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.ExperimentalAnnotation.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.manager.StratificationManager.Combiner.help.description=
org.broadinstitute.gatk.tools.walkers.variantutils.ValidateVariants.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.util.SortableJexlVCMatchExp.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.WorkInProgressAnnotation.help.description=
org.broadinstitute.gatk.tools.walkers.variantutils.LeftAlignAndTrimVariants.help.summary=Left-align indels in a variant callset
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.MultiallelicSummary.Type.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.BaseCounts.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.RodSystemValidation.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.CallableLoci.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.SnpEffPositionModifier.help.description=Stratifies variants as genes or coding regions, according to the effect modifier, as indicated by snpEff. The 'gene' category includes category 'coding region', and additionally includes introns. 'Coding regions' includes transcripts and, implicitly, UTRs.
org.broadinstitute.gatk.tools.walkers.qc.PrintRODs.help.summary=Print out all of the RODs in the input data set
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.CpG.help.summary=CpG is a stratification module for VariantEval that divides the input data by within/not within a CpG site
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.CompOverlap.help.summary=The Broad Institute SOFTWARE COPYRIGHT NOTICE AGREEMENT This software and its documentation are copyright 2009 by the Broad Institute/Massachusetts Institute of Technology.
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.CompRod.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.examples.help.description=
org.broadinstitute.gatk.tools.walkers.coverage.CallableLoci.Integrator.help.summary=
org.broadinstitute.gatk.tools.walkers.readutils.ClipReads.ClippingData.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.VariantAnnotator.help.summary=Annotate variant calls with context information
org.broadinstitute.gatk.tools.walkers.varianteval.util.DataPoint.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.RequiredStratification.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.MetricsCollection.help.description=Created by knoblett on 9/15/15.
org.broadinstitute.gatk.tools.walkers.readutils.SplitSamFile.help.description=Split a BAM file by sample  <p>This tool divides the input data set into separate BAM files, one for each sample in the input data set. The split files are named by concatenating the sample name to the end of the provided outputRoot command-line argument.</p>  <h3>Input</h3> <p> A single bam file. </p>  <h3>Output</h3> <p> A separate bam file for each sample. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T SplitSamFile \\ -R reference.fasta \\ -I input.bam \\ --outputRoot myproject_ </pre>
org.broadinstitute.gatk.tools.walkers.variantrecalibration.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.examples.help.summary=
org.broadinstitute.gatk.tools.walkers.diagnostics.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.IndelLengthHistogram.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.SnpEffPositionModifier.PositionModifier.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Family.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.util.AnalysisModuleScanner.help.summary=
org.broadinstitute.gatk.tools.walkers.variantutils.VariantsToBinaryPed.help.summary=Convert VCF to binary pedigree file
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.FunctionalClass.help.summary=Stratifies by nonsense, missense, silent, and all annotations in the input ROD, from the INFO field annotation.
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.VariantType.help.summary=Stratifies the eval variants by their type (SNP, INDEL, ETC)
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.ThetaVariantEvaluator.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.EffectType.help.summary=
org.broadinstitute.gatk.tools.walkers.qc.QCRef.help.description=Quality control for the reference fasta   <h3>Input</h3> <p> One reference file only.  And optionally -L intervals </p>  <h3>Output</h3> <p> If the reference is fully valid, the run will complete successfully. If not, an error message will be produced at the site where the program encountered a problem. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T QCRef \\ -R reference.fasta </pre>
org.broadinstitute.gatk.tools.walkers.fasta.FastaSequence.help.summary=
org.broadinstitute.gatk.tools.walkers.examples.GATKPaperGenotyper.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.rnaseq.ASEReadCounter.help.description=Calculate read counts per allele for allele-specific expression analysis  <p> This tool calculates allele counts at a set of positions after applying filters that are tuned for enabling allele-specific expression (ASE) analysis. The filters operate on mapping quality, base quality, depth of coverage, overlapping paired reads and deletions overlapping the position. All thresholds and options are controlled by command-line arguments. </p>  <h3>Input</h3> <ul> <li>BAM files (with proper headers) to be analyzed for ASE</li> <li>A VCF file with specific sites to process.</li> </ul>  <h3>Output</h3> <p> A table of allele counts at the given sites. By default, it is formatted as a tab-delimited text file that is readable by R and compatible with <a href\="http\://www.well.ox.ac.uk/~rivas/mamba/">Mamba</a>, a downstream tool developed for allele-specific expression analysis. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -R reference.fasta \\ -T ASEReadCounter \\ -o file_name.csv \\ -I input.bam \\ -sites sites.vcf \\ -U ALLOW_N_CIGAR_READS \\ [-minDepth 10] \\ [--minMappingQuality 10] \\ [--minBaseQuality 2] \\ [-drf DuplicateRead] </pre>  <h3>Note</h3> <ul> <li>Like most GATK tools, this tools filters out duplicate reads by default. However, some ASE methods recommend including duplicate reads in the analysis, so the DuplicateRead filter can be disabled using the "-drf DuplicateRead" flag in the command-line.</li> </ul> <h3>Caveat</h3> <ul> <li>This tool will only process biallelic sites. If your callset contains multiallelic sites, they will be ignored. Optionally, you can subset your callset to just biallelic variants using e.g. <a href\="org_broadinstitute_gatk_tools_walkers_variantutils_SelectVariants.php">SelectVariants</a> with the option "-restrictAllelesTo BIALLELIC".</li> </ul>
org.broadinstitute.gatk.tools.walkers.annotator.FractionInformativeReads.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.EvalRod.help.description=Required stratification grouping output by each eval ROD
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.MultiallelicSummary.Type.help.description=
org.broadinstitute.gatk.tools.walkers.variantutils.SelectHeaders.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.CountTerminusEvent.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.CallableLoci.CallableBaseState.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.GenotypeAnnotation.help.summary=
org.broadinstitute.gatk.tools.walkers.help.help.summary=
org.broadinstitute.gatk.tools.walkers.diffengine.help.description=
org.broadinstitute.gatk.tools.walkers.annotator.VariantOverlapAnnotator.help.summary=Annotate the ID field and attribute overlap FLAGs for a VariantContext against a RefMetaDataTracker or a list of VariantContexts
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.RodRequiringAnnotation.help.summary=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.FunctionalClass.help.description=Stratifies by nonsense, missense, silent, and all annotations in the input ROD, from the INFO field annotation.
org.broadinstitute.gatk.tools.walkers.fasta.FastaStats.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Sample.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.qc.CountRODsByRef.help.description=Count the number of ROD objects encountered along the reference  <p>CountRodsByRef is a RefWalker, and so traverses the data by position along the reference. It counts ROD elements (such as, but not limited to, variants) found at each position or within specific intervals if you use the -L argument (see CommandLineGATK).</p>  <p>Note that this tool is different from the basic CountRods, which is a RODWalker, and so traverses the data by ROD. For example if the ROD passed to it is a VCF file, CountRods will simply count the variants in the file.</p>  <p>Both these tools are different from CountVariants in that they are more generic (they can also count RODs that are not variants) and CountVariants is more detailed, in that it computes additional statistics (type of variants being indels vs. SNPs etc). </p>  <h3>Input</h3> <p> One or more ROD files. </p>  <h3>Output</h3> <p> Number of RODs seen. </p>  <h3>Usage example</h3> <pre> java -jar GenomeAnalysisTK.jar \\ -T CountRODsByRef \\ -R reference.fasta \\ -o output.txt \\ --rod input.vcf </pre>
org.broadinstitute.gatk.tools.walkers.coverage.CompareCallableLoci.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.EffectFunctionalClass.help.description=
org.broadinstitute.gatk.tools.walkers.coverage.help.description=
org.broadinstitute.gatk.tools.walkers.varianteval.stratifications.Novelty.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.StandardSomaticAnnotation.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.VariantAnnotatorEngine.VAExpression.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.variantutils.SelectHeaders.help.summary=Selects headers from a VCF source
org.broadinstitute.gatk.tools.walkers.help.WalkerDoclet.help.summary=GATKDocs for walkers.
org.broadinstitute.gatk.tools.walkers.variantutils.VariantsToVCF.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.coverage.CoverageUtils.CountPileupType.help.summary=
org.broadinstitute.gatk.tools.walkers.annotator.interfaces.AS_StandardAnnotation.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.annotator.SnpEff.SnpEffEffect.help.description=Helper class to parse, validate, and store a single SnpEff effect and its metadata.
org.broadinstitute.gatk.tools.walkers.coverage.DoCOutputType.help.summary=Models a single output file in the DoC walker.
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.ValidationReport.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.MetricsCollection.version=3.5-1-g3d809e3
org.broadinstitute.gatk.tools.walkers.varianteval.evaluators.ValidationReport.help.description=The Broad Institute SOFTWARE COPYRIGHT NOTICE AGREEMENT This software and its documentation are copyright 2009 by the Broad Institute/Massachusetts Institute of Technology. All rights are reserved. <p/> This software is supplied without any warranty or guaranteed support whatsoever. Neither the Broad Institute nor MIT can be responsible for its use, misuse, or functionality.
org.broadinstitute.gatk.tools.walkers.varianteval.VariantEvalReportWriter.help.description=Class for writing the GATKReport for VariantEval  Accepts a fulled evaluated (i.e., there's no more data coming) set of stratifications and evaluators and supports writing out the data in these evaluators to a GATKReport.
